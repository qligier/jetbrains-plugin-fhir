/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2022 Quentin Ligier. Use of this source code is governed by the MIT license
package ch.qligier.jetbrains.plugin.fhir.fsh.lexer;

import ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.FshTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Fsh.flex</tt>
 */
class FshLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\176\2");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\7\1\51\1\50\1\44\2\0\1\53\1\77\1\100"+
    "\1\5\1\56\1\75\1\36\1\54\1\4\12\43\1\47\2\0\1\74\1\76\1\6\1\0\1\57\1\45\1"+
    "\65\1\15\1\61\3\45\1\62\2\45\1\70\1\10\1\14\1\72\1\60\1\45\1\67\1\11\1\13"+
    "\1\12\1\64\1\45\1\71\1\45\1\55\1\101\1\52\1\102\1\103\1\45\1\0\1\20\1\33\1"+
    "\37\1\26\1\16\1\25\1\41\1\46\1\32\2\45\1\23\1\21\1\30\1\40\1\22\1\34\1\24"+
    "\1\31\1\27\1\35\1\63\1\73\1\17\1\66\1\42\1\0\1\104\43\0\1\3\337\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\4\4\2\5"+
    "\20\4\1\6\1\1\1\4\1\7\1\10\2\1\1\11"+
    "\1\12\13\4\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\0\1\23\2\0\1\5\22\4\1\24"+
    "\2\4\1\25\1\4\1\26\3\4\1\6\1\4\2\0"+
    "\1\27\2\0\1\30\1\31\4\4\1\32\12\4\1\33"+
    "\2\23\2\0\1\33\13\4\1\34\24\4\1\6\2\0"+
    "\1\4\2\0\1\27\2\0\1\27\21\4\1\0\1\35"+
    "\17\4\1\36\1\4\1\37\5\4\1\24\1\4\1\0"+
    "\2\4\1\40\3\4\1\6\2\0\1\4\2\0\1\27"+
    "\1\0\24\4\1\41\1\4\1\42\11\4\1\43\5\4"+
    "\1\44\1\45\2\4\1\46\3\4\1\6\1\47\1\0"+
    "\1\4\1\0\2\50\1\0\1\51\16\4\1\52\1\53"+
    "\2\4\1\54\1\55\7\4\1\56\1\57\5\4\1\0"+
    "\1\4\1\0\1\47\1\0\1\60\1\61\15\4\1\62"+
    "\2\4\1\63\1\64\1\4\1\65\2\4\1\66\4\4"+
    "\1\0\1\4\2\0\1\60\1\67\12\4\1\70\1\71"+
    "\1\72\3\4\1\73\2\4\1\47\1\74\1\60\2\4"+
    "\1\75\1\4\1\76\1\77\3\4\1\100\5\4\1\0"+
    "\1\4\1\101\1\4\1\102\1\103\1\4\1\104\4\4"+
    "\1\47\1\105\1\106\1\107\1\110\12\4\2\0\2\4"+
    "\2\0\1\111\1\4\1\112\3\0\1\112\2\0\1\112"+
    "\1\0\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\105\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u026d\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u026d\0\u0747\0\105"+
    "\0\105\0\u078c\0\u07d1\0\u0816\0\105\0\u085b\0\u08a0\0\u08e5"+
    "\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\105\0\105"+
    "\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\105\0\u0c66\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18"+
    "\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140"+
    "\0\u1185\0\u11ca\0\105\0\u120f\0\u026d\0\u1254\0\u1299\0\u12de"+
    "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u07d1\0\105"+
    "\0\105\0\u14c1\0\u1506\0\u154b\0\u1590\0\u026d\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842"+
    "\0\105\0\u1887\0\105\0\u18cc\0\u1911\0\u0b52\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\u026d\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce"+
    "\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6"+
    "\0\u223b\0\u2280\0\u22c5\0\u230a\0\105\0\u234f\0\u2394\0\u13ad"+
    "\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u2829\0\u286e\0\105\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u026d\0\u2cbe\0\u026d\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u026d\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u026d"+
    "\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153"+
    "\0\u3198\0\u13f2\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u026d"+
    "\0\u3786\0\u026d\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924"+
    "\0\u3969\0\u39ae\0\u39f3\0\u026d\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07"+
    "\0\u3b4c\0\u2ea1\0\u026d\0\u3b91\0\u3bd6\0\u026d\0\u3c1b\0\u3c60"+
    "\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\105\0\u3153"+
    "\0\u3e43\0\u026d\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1"+
    "\0\u4026\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209"+
    "\0\u026d\0\u026d\0\u424e\0\u4293\0\u026d\0\u026d\0\u42d8\0\u431d"+
    "\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u026d\0\u026d\0\u44bb"+
    "\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\105"+
    "\0\u46e3\0\u4728\0\u026d\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881"+
    "\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9"+
    "\0\u026d\0\u4aee\0\u4b33\0\u026d\0\u026d\0\u4b78\0\u026d\0\u4bbd"+
    "\0\u4c02\0\u026d\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0"+
    "\0\u4de5\0\u4e2a\0\u4e6f\0\u026d\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83"+
    "\0\u4fc8\0\u500d\0\u5052\0\u5097\0\u50dc\0\u5121\0\u026d\0\u026d"+
    "\0\u026d\0\u5166\0\u51ab\0\u51f0\0\u026d\0\u5235\0\u527a\0\u52bf"+
    "\0\u4e2a\0\105\0\u5304\0\u5349\0\u538e\0\u53d3\0\u026d\0\u026d"+
    "\0\u5418\0\u545d\0\u54a2\0\u026d\0\u54e7\0\u552c\0\u5571\0\u55b6"+
    "\0\u55fb\0\u5640\0\u5685\0\u026d\0\u56ca\0\u026d\0\u026d\0\u570f"+
    "\0\u026d\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868\0\u026d\0\u026d"+
    "\0\u026d\0\u026d\0\u58ad\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06"+
    "\0\u5a4b\0\u5a90\0\u5ad5\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e"+
    "\0\u5c73\0\u5cb8\0\u026d\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u5e11"+
    "\0\105\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\16"+
    "\1\20\1\16\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\16\1\30\1\31\1\32\1\33\1\34\1\16"+
    "\1\35\1\36\1\16\1\37\1\40\1\41\1\42\1\2"+
    "\1\43\1\44\1\16\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\16\1\55\1\56\1\57\1\16"+
    "\1\60\1\61\1\62\1\2\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\106\0\3\3\101\0\1\71\2\0\1\71"+
    "\1\72\1\73\44\71\1\74\32\71\7\0\1\75\105\0"+
    "\1\16\1\13\6\16\1\76\23\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\2\16\1\13\3\16\1\77"+
    "\21\16\1\100\3\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\21\16\1\101\12\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\2\16\1\13\5\16\1\102"+
    "\11\16\1\103\11\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\34\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\104\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\7\16\1\105\24\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\20\16\1\106"+
    "\13\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\14\16\1\107\17\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\110\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\10\16\1\111\3\16\1\112"+
    "\17\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\6\16\1\113\25\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\14\16\1\114\17\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\10\16\1\115\17\16\1\116"+
    "\3\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\34\16\1\0\2\16\6\0\1\16\1\0\7\16\1\117"+
    "\5\16\21\0\20\16\1\120\1\121\12\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\14\16\1\122\17\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\34\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\2\0\1\123"+
    "\16\0\30\16\1\124\3\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\14\16\1\125\3\16\1\126\2\16"+
    "\1\127\10\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\130\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\33\16\1\131\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\17\16\1\132\14\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\11\0\1\133\2\0"+
    "\1\134\45\133\1\135\1\136\32\133\52\137\1\0\1\140"+
    "\31\137\54\0\1\141\40\0\13\16\1\142\20\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\10\16\1\143"+
    "\3\16\1\144\17\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\7\16\1\145\24\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\16\16\1\146\1\16\1\147"+
    "\13\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\10\16\1\150\23\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\10\16\1\151\23\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\10\16\1\152\17\16\1\153"+
    "\3\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\6\16\1\154\16\16\1\155\6\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\30\16\1\156\3\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\34\16\1\0"+
    "\2\16\6\0\1\16\1\0\1\16\1\157\13\16\21\0"+
    "\34\16\1\0\1\16\1\160\6\0\1\16\1\0\15\16"+
    "\11\0\1\71\2\0\1\71\1\161\45\71\1\74\32\71"+
    "\1\72\1\162\1\163\102\72\5\164\1\165\77\164\1\71"+
    "\2\0\1\71\1\166\45\71\1\74\32\71\10\0\12\16"+
    "\1\167\21\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\34\16\1\0\2\16\6\0\1\16\1\0\4\16"+
    "\1\170\10\16\21\0\25\16\1\171\6\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\10\16\1\172\23\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\14\16"+
    "\1\173\17\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\17\16\1\174\14\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\21\16\1\175\12\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\10\16\1\176\6\16"+
    "\1\177\2\16\1\200\4\16\1\201\4\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\16\16\1\202\15\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\203\25\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\24\16\1\204\4\16\1\205\2\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\13\16\1\206\20\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\30\16"+
    "\1\207\3\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\21\16\1\210\12\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\25\16\1\211\6\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\11\16\1\212\22\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\17\16"+
    "\1\213\14\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\21\16\1\214\12\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\21\16\1\215\5\16\1\216\4\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\26\16"+
    "\1\217\5\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\20\16\1\220\13\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\16\16\1\221\1\16\1\222\13\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\13\16"+
    "\1\223\20\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\224\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\20\16\1\225\13\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\26\16\1\226\4\16"+
    "\1\227\1\0\2\16\1\230\5\0\1\16\1\231\15\16"+
    "\21\0\17\16\1\232\14\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\11\0\1\133\2\233\1\234\45\133\1\235"+
    "\1\136\32\133\1\134\2\0\46\134\1\235\1\236\32\134"+
    "\51\0\1\237\33\0\1\133\2\233\1\234\45\133\1\240"+
    "\1\136\32\133\10\0\22\16\1\241\11\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\14\16\1\242\17\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\30\16"+
    "\1\243\3\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\12\16\1\244\4\16\1\245\14\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\21\16\1\246\12\16"+
    "\1\0\2\16\6\0\1\16\1\0\4\16\1\247\10\16"+
    "\21\0\13\16\1\250\20\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\13\16\1\251\20\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\20\16\1\252\13\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\16\16"+
    "\1\253\15\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\15\16\1\254\3\16\1\255\12\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\13\16\1\256\20\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\31\16"+
    "\1\257\2\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\10\16\1\260\23\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\6\16\1\261\25\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\13\0\1\163\102\0\5\164"+
    "\1\262\77\164\4\0\1\263\1\165\107\0\12\16\1\264"+
    "\21\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\6\16\1\265\25\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\14\16\1\266\17\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\31\16\1\267\2\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\31\16\1\270"+
    "\2\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\13\16\1\271\20\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\27\16\1\272\4\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\11\16\1\273\15\16\1\274"+
    "\4\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\6\16\1\275\25\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\21\16\1\276\12\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\13\16\1\277\20\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\15\16\1\300"+
    "\16\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\25\16\1\301\6\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\302\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\21\16\1\211\12\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\11\16\1\303"+
    "\22\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\27\16\1\304\4\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\305\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\6\16\1\306\25\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\26\16\1\307"+
    "\5\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\17\16\1\310\14\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\311\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\13\16\1\312\20\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\10\16\1\313"+
    "\7\16\1\314\13\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\34\16\1\0\2\16\1\315\5\0\1\16"+
    "\1\0\15\16\21\0\6\16\1\316\25\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\17\16\1\317\14\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\34\16"+
    "\1\0\2\16\6\0\1\16\1\0\7\16\1\320\5\16"+
    "\21\0\34\16\1\0\2\16\6\0\1\16\1\0\7\16"+
    "\1\321\5\16\21\0\6\16\1\322\25\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\33\16\1\323\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\33\16\1\324"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\54\0\1\325"+
    "\104\0\1\326\51\0\12\16\1\327\21\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\11\0\1\330\3\0\45\330"+
    "\1\0\1\331\32\330\1\133\2\0\1\134\45\133\1\235"+
    "\1\136\32\133\1\134\2\0\46\134\1\332\1\236\32\134"+
    "\51\237\1\333\33\237\10\0\10\16\1\334\23\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\6\16\1\335"+
    "\25\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\15\16\1\336\16\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\14\16\1\337\17\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\6\16\1\340\25\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\17\16\1\341"+
    "\14\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\10\16\1\342\23\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\25\16\1\343\6\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\25\16\1\344\6\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\30\16\1\345"+
    "\3\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\6\16\1\346\25\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\347\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\30\16\1\350\3\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\6\16\1\351"+
    "\25\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\22\16\1\352\11\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\17\16\1\353\14\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\14\16\1\354\17\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\11\0\4\164\1\263"+
    "\1\262\77\164\10\0\22\16\1\355\11\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\14\16\1\356\17\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\27\16"+
    "\1\357\4\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\360\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\6\16\1\361\25\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\6\16\1\362\25\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\14\16"+
    "\1\363\17\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\12\16\1\364\21\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\17\16\1\365\14\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\20\16\1\366\13\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\17\16"+
    "\1\367\14\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\25\16\1\370\6\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\6\16\1\371\25\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\22\16\1\372\11\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\7\16"+
    "\1\313\24\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\373\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\16\16\1\374\15\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\22\16\1\375\11\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\376\25\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\14\16\1\377\17\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\25\16\1\u0100\6\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\30\16\1\u0101\3\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\11\0\1\u0102"+
    "\3\0\44\u0102\1\0\34\u0102\10\0\21\16\1\u0103\12\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\u0104\1\16\1\u0105\23\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\21\16\1\u0106\12\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\14\16\1\u0107\17\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\33\16"+
    "\1\u0108\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\26\16\1\u0109\4\16\1\u010a\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\54\0\1\u010b\104\0\1\u010c\51\0\21\16"+
    "\1\u010d\12\16\1\0\2\16\1\u010e\5\0\1\16\1\0"+
    "\15\16\11\0\1\330\3\233\45\330\1\u010f\1\331\33\330"+
    "\3\233\45\330\1\u0110\1\331\32\330\51\237\1\u0111\33\237"+
    "\10\0\21\16\1\u0112\12\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\20\16\1\u0113\13\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\22\16\1\u0114\11\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\u0115\25\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\20\16\1\u0116\13\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\10\16\1\u0117\23\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\14\16\1\u0118\17\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\u0119\25\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\u011a\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\20\16\1\u011b\13\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\1\16\1\u011c\32\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\14\16"+
    "\1\u011d\17\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\25\16\1\u011e\6\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\1\16\1\u011f\32\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\27\16\1\u0120\4\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\34\16"+
    "\1\0\1\16\1\u0121\6\0\1\16\1\0\15\16\21\0"+
    "\6\16\1\u0122\25\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\20\16\1\u0123\13\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\22\16\1\u0124\11\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\6\16\1\u0125"+
    "\25\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\17\16\1\u0126\14\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\22\16\1\u0127\11\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\13\16\1\u0128\20\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\13\16\1\u0129"+
    "\20\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\21\16\1\u012a\12\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\21\16\1\313\12\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\16\16\1\u012b\15\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\14\16\1\372"+
    "\17\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\14\16\1\u012c\17\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\20\16\1\u012d\13\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\20\16\1\313\13\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\11\16\1\u012e"+
    "\22\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\17\16\1\u012f\14\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\16\16\1\u0130\15\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\17\16\1\u0131\14\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\20\16\1\u0132"+
    "\13\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\22\16\1\u0133\11\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\10\16\1\u0134\23\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\34\16\1\0\2\16\1\u0135"+
    "\5\0\1\16\1\0\15\16\21\0\33\16\1\u0136\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\33\16\1\u010a"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\47\0\1\231"+
    "\10\0\1\u0137\5\0\1\u0138\1\231\75\0\1\u0135\45\0"+
    "\34\16\1\0\2\16\1\u010e\5\0\1\16\1\0\15\16"+
    "\15\0\1\u0139\100\0\51\237\1\u013a\33\237\10\0\17\16"+
    "\1\u013b\14\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\13\16\1\u013c\20\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\21\16\1\u013d\12\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\21\16\1\u013e\12\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\20\16"+
    "\1\u013f\13\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\22\16\1\u0140\11\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\21\16\1\u0141\12\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\1\16\1\u0142\32\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\22\16"+
    "\1\u0143\11\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\34\16\1\0\2\16\6\0\1\16\1\0\7\16"+
    "\1\u0144\5\16\21\0\6\16\1\u0145\25\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\14\16\1\u0146\17\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\u0147\25\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\10\16\1\u0148\23\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\31\16\1\u0149\2\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\17\16\1\u014a\14\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\12\16"+
    "\1\u014b\21\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\u014c\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\34\16\1\0\2\16\6\0\1\16"+
    "\1\0\7\16\1\u014d\5\16\21\0\22\16\1\u014e\11\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\u014f\25\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\u0150\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\16\16\1\u0151\15\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\6\16\1\u0152\25\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\26\16"+
    "\1\u0153\5\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\17\16\1\u0154\14\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\20\16\1\u0155\13\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\13\16\1\u0156\20\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\54\0\1\u0157"+
    "\51\0\33\16\1\u0158\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\54\0\1\u0159\45\0\1\u015a\151\0\1\u015b\43\0"+
    "\6\16\1\u015c\25\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\21\16\1\u015d\12\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\22\16\1\u015e\11\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\27\16\1\u015f"+
    "\4\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\10\16\1\u0160\23\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\u0161\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\6\16\1\u0162\25\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\27\16\1\u0163"+
    "\4\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\21\16\1\u0164\12\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\20\16\1\u0165\13\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\27\16\1\u0166\4\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\17\16\1\u0167"+
    "\14\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\13\16\1\u0168\20\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\34\16\1\0\2\16\6\0\1\16\1\0"+
    "\7\16\1\u0169\5\16\21\0\17\16\1\u016a\14\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\23\16\1\364"+
    "\10\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\16\16\1\u014c\15\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\u016b\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\10\16\1\313\23\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\34\16\1\0"+
    "\2\16\6\0\1\16\1\0\10\16\1\u016c\4\16\21\0"+
    "\21\16\1\u016d\12\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\22\16\1\u016e\11\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\54\0\1\u0138\51\0\26\16\1\u016f"+
    "\5\16\1\0\2\16\6\0\1\16\1\0\15\16\54\0"+
    "\1\u0170\41\0\1\u0171\3\0\44\u0171\1\0\34\u0171\51\0"+
    "\1\u0172\43\0\22\16\1\u0173\11\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\30\16\1\u0174\3\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\6\16\1\u0175"+
    "\25\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\20\16\1\u0176\13\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\17\16\1\u0177\14\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\17\16\1\u0178\14\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\10\16\1\u0179"+
    "\23\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\17\16\1\u017a\14\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\27\16\1\u017b\4\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\6\16\1\u017c\25\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\22\16\1\u017d"+
    "\11\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\20\16\1\u017e\13\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\u017f\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\32\16\1\u0180\1\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\33\16\1\u0181"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\47\0\1\231"+
    "\15\0\1\u0182\1\u0138\1\231\36\0\30\16\1\u0183\3\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\20\16"+
    "\1\u0184\13\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\34\16\1\0\2\16\6\0\1\16\1\0\13\16"+
    "\1\u0185\1\16\21\0\17\16\1\u0186\14\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\13\16\1\u0187\20\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\6\16"+
    "\1\u0188\25\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\u0189\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\30\16\1\u018a\3\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\17\16\1\u018b\14\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\15\16"+
    "\1\u018c\16\16\1\0\2\16\6\0\1\16\1\0\15\16"+
    "\21\0\6\16\1\367\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\33\16\1\u018d\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\54\0\1\u018e\51\0\20\16\1\u018f"+
    "\13\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\15\16\1\u0190\16\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\11\16\1\u0191\22\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\20\16\1\u0192\13\16\1\0"+
    "\2\16\6\0\1\16\1\0\15\16\21\0\26\16\1\u0193"+
    "\5\16\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\6\16\1\u0194\25\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\3\16\1\u0195\30\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\47\0\1\231\4\0\1\u018e\11\0"+
    "\1\u0138\1\231\36\0\30\16\1\u0196\3\16\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\14\16\1\u0197\17\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\33\16"+
    "\1\u0198\1\0\2\16\6\0\1\16\1\0\15\16\21\0"+
    "\15\16\1\313\16\16\1\0\2\16\6\0\1\16\1\0"+
    "\15\16\21\0\6\16\1\u0199\25\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\33\16\1\u019a\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\21\0\20\16\1\u019b\13\16"+
    "\1\0\2\16\6\0\1\16\1\0\15\16\21\0\26\16"+
    "\1\u019c\5\16\1\0\2\16\1\u019d\5\0\1\16\1\u019e"+
    "\15\16\21\0\27\16\1\u019f\4\16\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\21\0\33\16\1\u01a0\1\0\2\16"+
    "\6\0\1\16\1\0\15\16\54\0\1\u01a1\104\0\1\u01a2"+
    "\51\0\6\16\1\u01a3\25\16\1\0\2\16\6\0\1\16"+
    "\1\0\15\16\21\0\33\16\1\u01a4\1\0\2\16\6\0"+
    "\1\16\1\0\15\16\54\0\1\u01a5\104\0\1\u01a6\51\0"+
    "\34\16\1\0\2\16\1\u01a7\5\0\1\16\1\0\15\16"+
    "\47\0\1\u019e\10\0\1\u01a8\5\0\1\u01a9\1\u019e\75\0"+
    "\1\u01a7\100\0\1\u01aa\104\0\1\u01ab\104\0\1\u01a9\104\0"+
    "\1\u01ac\77\0\1\u019e\15\0\1\u01ad\1\u01a9\1\u019e\71\0"+
    "\1\u01ae\77\0\1\u019e\4\0\1\u01ae\11\0\1\u01a9\1\u019e"+
    "\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24495];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\32\1\2\11\3\1\1\11"+
    "\13\1\10\11\1\0\1\1\2\0\1\11\25\1\1\11"+
    "\7\1\2\0\1\1\2\0\2\11\17\1\1\11\1\1"+
    "\1\11\2\0\42\1\2\0\1\1\2\0\1\11\2\0"+
    "\22\1\1\0\1\11\31\1\1\0\7\1\2\0\1\1"+
    "\2\0\1\1\1\0\60\1\1\0\1\1\1\0\1\11"+
    "\1\1\1\0\43\1\1\0\1\1\1\0\1\11\1\0"+
    "\35\1\1\0\1\1\2\0\27\1\1\11\17\1\1\0"+
    "\32\1\2\0\2\1\2\0\3\1\3\0\1\11\2\0"+
    "\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FshLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 75: break;
          case 2: 
            { return FshTypes.WHITESPACE;
            } 
            // fall through
          case 76: break;
          case 3: 
            { return FshTypes.STAR;
            } 
            // fall through
          case 77: break;
          case 4: 
            { return FshTypes.IDENTIFIER;
            } 
            // fall through
          case 78: break;
          case 5: 
            { return FshTypes.KWFLAG;
            } 
            // fall through
          case 79: break;
          case 6: 
            { return FshTypes.DIGIT;
            } 
            // fall through
          case 80: break;
          case 7: 
            { return FshTypes.COLON;
            } 
            // fall through
          case 81: break;
          case 8: 
            { return FshTypes.HASH;
            } 
            // fall through
          case 82: break;
          case 9: 
            { return FshTypes.DOT;
            } 
            // fall through
          case 83: break;
          case 10: 
            { return FshTypes.PLUS;
            } 
            // fall through
          case 84: break;
          case 11: 
            { return FshTypes.EQUAL;
            } 
            // fall through
          case 85: break;
          case 12: 
            { return FshTypes.COMMA;
            } 
            // fall through
          case 86: break;
          case 13: 
            { return FshTypes.LEFTPAREN;
            } 
            // fall through
          case 87: break;
          case 14: 
            { return FshTypes.RIGHTPAREN;
            } 
            // fall through
          case 88: break;
          case 15: 
            { return FshTypes.LEFTBRACKET;
            } 
            // fall through
          case 89: break;
          case 16: 
            { return FshTypes.RIGHTBRACKET;
            } 
            // fall through
          case 90: break;
          case 17: 
            { return FshTypes.CARET;
            } 
            // fall through
          case 91: break;
          case 18: 
            { return FshTypes.PIPE;
            } 
            // fall through
          case 92: break;
          case 19: 
            { return FshTypes.LINECOMMENT;
            } 
            // fall through
          case 93: break;
          case 20: 
            { return FshTypes.KWCODEOPERATOR;
            } 
            // fall through
          case 94: break;
          case 21: 
            { return FshTypes.ARROW;
            } 
            // fall through
          case 95: break;
          case 22: 
            { return FshTypes.KWOR;
            } 
            // fall through
          case 96: break;
          case 23: 
            { return FshTypes.STRING;
            } 
            // fall through
          case 97: break;
          case 24: 
            { return FshTypes.UNIT;
            } 
            // fall through
          case 98: break;
          case 25: 
            { return FshTypes.DOUBLEDOT;
            } 
            // fall through
          case 99: break;
          case 26: 
            { return FshTypes.KWID;
            } 
            // fall through
          case 100: break;
          case 27: 
            { return FshTypes.REGEX;
            } 
            // fall through
          case 101: break;
          case 28: 
            { return FshTypes.KWAND;
            } 
            // fall through
          case 102: break;
          case 29: 
            { return FshTypes.BLOCKCOMMENT;
            } 
            // fall through
          case 103: break;
          case 30: 
            { return FshTypes.KWFROM;
            } 
            // fall through
          case 104: break;
          case 31: 
            { return FshTypes.KWBOOLEAN;
            } 
            // fall through
          case 105: break;
          case 32: 
            { return FshTypes.KWONLY;
            } 
            // fall through
          case 106: break;
          case 33: 
            { return FshTypes.KWUSAGE;
            } 
            // fall through
          case 107: break;
          case 34: 
            { return FshTypes.KWTITLE;
            } 
            // fall through
          case 108: break;
          case 35: 
            { return FshTypes.KWNAMED;
            } 
            // fall through
          case 109: break;
          case 36: 
            { return FshTypes.URN;
            } 
            // fall through
          case 110: break;
          case 37: 
            { return FshTypes.KWCODES;
            } 
            // fall through
          case 111: break;
          case 38: 
            { return FshTypes.KWOBEYS;
            } 
            // fall through
          case 112: break;
          case 39: 
            { return FshTypes.TIME;
            } 
            // fall through
          case 113: break;
          case 40: 
            { return FshTypes.CONCEPTSTRING;
            } 
            // fall through
          case 114: break;
          case 41: 
            { return FshTypes.KWALIAS;
            } 
            // fall through
          case 115: break;
          case 42: 
            { return FshTypes.KWXPATH;
            } 
            // fall through
          case 116: break;
          case 43: 
            { return FshTypes.KWWHERE;
            } 
            // fall through
          case 117: break;
          case 44: 
            { return FshTypes.KWSOURCE;
            } 
            // fall through
          case 118: break;
          case 45: 
            { return FshTypes.KWTARGET;
            } 
            // fall through
          case 119: break;
          case 46: 
            { return FshTypes.KWSYSTEM;
            } 
            // fall through
          case 120: break;
          case 47: 
            { return FshTypes.KWINSERT;
            } 
            // fall through
          case 121: break;
          case 48: 
            { return FshTypes.MULTILINESTRING;
            } 
            // fall through
          case 122: break;
          case 49: 
            { return FshTypes.KWPARENT;
            } 
            // fall through
          case 123: break;
          case 50: 
            { return FshTypes.KWMAPPING;
            } 
            // fall through
          case 124: break;
          case 51: 
            { return FshTypes.KWBINDINGSTRENGTH;
            } 
            // fall through
          case 125: break;
          case 52: 
            { return FshTypes.KWEXACTLY;
            } 
            // fall through
          case 126: break;
          case 53: 
            { return FshTypes.KWEXCLUDE;
            } 
            // fall through
          case 127: break;
          case 54: 
            { return FshTypes.KWINCLUDE;
            } 
            // fall through
          case 128: break;
          case 55: 
            { return FshTypes.KWPROFILE;
            } 
            // fall through
          case 129: break;
          case 56: 
            { return FshTypes.KWRULESET;
            } 
            // fall through
          case 130: break;
          case 57: 
            { return FshTypes.KWLOGICAL;
            } 
            // fall through
          case 131: break;
          case 58: 
            { return FshTypes.KWSEVERITY;
            } 
            // fall through
          case 132: break;
          case 59: 
            { return FshTypes.KWCONTAINS;
            } 
            // fall through
          case 133: break;
          case 60: 
            { return FshTypes.URL;
            } 
            // fall through
          case 134: break;
          case 61: 
            { return FshTypes.KWINSTANCE;
            } 
            // fall through
          case 135: break;
          case 62: 
            { return FshTypes.KWVALUESETREF;
            } 
            // fall through
          case 136: break;
          case 63: 
            { return FshTypes.KWVALUESET;
            } 
            // fall through
          case 137: break;
          case 64: 
            { return FshTypes.KWRESOURCE;
            } 
            // fall through
          case 138: break;
          case 65: 
            { return FshTypes.KWEXTENSION;
            } 
            // fall through
          case 139: break;
          case 66: 
            { return FshTypes.KWINVARIANT;
            } 
            // fall through
          case 140: break;
          case 67: 
            { return FshTypes.KWCANONICAL;
            } 
            // fall through
          case 141: break;
          case 68: 
            { return FshTypes.KWREFERENCE;
            } 
            // fall through
          case 142: break;
          case 69: 
            { return FshTypes.KWEXPRESSION;
            } 
            // fall through
          case 143: break;
          case 70: 
            { return FshTypes.KWINSTANCEOF;
            } 
            // fall through
          case 144: break;
          case 71: 
            { return FshTypes.KWCODESYSTEM;
            } 
            // fall through
          case 145: break;
          case 72: 
            { return FshTypes.KWDESCRIPTION;
            } 
            // fall through
          case 146: break;
          case 73: 
            { return FshTypes.KWCONTENTREFERENCE;
            } 
            // fall through
          case 147: break;
          case 74: 
            { return FshTypes.DATETIME;
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

/*
 * Copyright 2022 Quentin Ligier. Use of this source code is governed by the MIT license.
 */

{
  generate=[java="11"]

  parserClass="ch.qligier.jetbrains.plugin.fhir.fsh.parser.FshParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Fsh"
  psiImplClassSuffix="Impl"
  psiPackage="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi"
  psiImplPackage="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.impl"

  elementTypeHolderClass="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.FshTypes"
  elementTypeClass="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.FshElementType"
  tokenTypeClass="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.FshTokenType"

  // Source of helper methods used in "methods" annotations
  psiImplUtilClass="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.impl.FshPsiImplUtil"

  extends("(alias|profile|extension|invariant|instance|valueSet|codeSystem|ruleSet|mapping|logical|resource)")=item
  extends("(parent|id|title|description|expression|xpath|severity|instanceOf|usage|source|target)")=metadata
  extends("(cardRule|flagRule|valueSetRule|fixedValueRule|containsRule|onlyRule|obeysRule|caretValueRule|insertRule)")=rule
  extends("(pathRule|addElementRule|addCRElementRule|concept|codeCaretValueRule|codeInsertRule|vsComponent|mappingRule)")=rule

  methods("Identifier")=[getReference]
}

fshFile                   ::= any_*

// A simple recover
private recover           ::= !(any_)

// cf. https://github.com/JetBrains/intellij-plugins/blob/master/makefile/grammars/Makefile.bnf
private any_              ::= !<<eof>> item_ {pin=1 recoverWhile=recover}
private item_             ::= (alias | profile | extension | invariant | instance | valueSet | codeSystem | ruleSet |
                              mapping | logical | resource)

// LineComment and BlockComment appear here to be included in FshTypes, but they won't be passed to the parser
// cf. https://plugins.jetbrains.com/docs/intellij/implementing-parser-and-psi.html#whitespace-and-comments
private comment_          ::= (LineComment | BlockComment)

// Declaration: ALIAS
alias                     ::= KwAlias Colon Identifier Equal aliasValue
aliasValue                ::= (Urn | Url);

// Declaration: PROFILE
profile                   ::= KwProfile Colon Identifier metadata_* sdRule_*;

// Declaration: EXTENSION
extension                 ::= KwExtension Colon Identifier metadata_* sdRule_*;

// Declaration: INVARIANT
invariant                 ::= KwInvariant Colon Identifier metadata_*;

// Declaration: INSTANCE
instance                  ::= KwInstance Colon Identifier metadata_* instanceRule_*;
private instanceRule_     ::= fixedValueRule | insertRule | pathRule;

// Declaration: VALUESET
valueSet                  ::= KwValueSet Colon Identifier metadata_* vsRule_*;
private vsRule_           ::= (vsComponent | caretValueRule | insertRule)
vsComponent               ::= ruleStart (KwInclude | KwExclude)? (vsConceptComponent | vsFilterComponent);
vsConceptComponent        ::= (code vsComponentFrom?) | (code (KwAnd code)* vsComponentFrom);
vsFilterComponent         ::= KwCodes vsComponentFrom (KwWhere vsFilterList)?;
vsComponentFrom           ::= KwFrom (vsFromSystem (KwAnd vsFromValueset)? | vsFromValueset (KwAnd vsFromSystem)?);
vsFromSystem              ::= KwSystem itemIdentifier;
vsFromValueset            ::= KwValueSetRef itemIdentifier (KwAnd itemIdentifier)*;
vsFilterList              ::= vsFilterDefinition (KwAnd vsFilterDefinition)*;
vsFilterDefinition        ::= Identifier vsFilterOperator vsFilterValue?;
vsFilterOperator          ::= Equal | KwCodeOperator;
vsFilterValue             ::= code | KwBoolean | Regex | string;

// Declaration: CODESYSTEM
codeSystem                ::= KwCodeSystem Colon Identifier metadata_* csRule_*;
private csRule_           ::= concept | codeCaretValueRule | codeInsertRule;

// Declaration: RULESET
ruleSet                   ::= KwRuleSet Colon ruleSetReference ruleSetRule_*;
private ruleSetRule_      ::= sdRule_ | addElementRule | addCRElementRule | concept | codeCaretValueRule |
                              codeInsertRule | vsComponent | mappingRule;

// Declaration: MAPPING
mapping                   ::= KwMapping Colon Identifier metadata_* mappingEntityRule_*;
private mappingEntityRule_::= mappingRule | insertRule | pathRule;

// Declaration: LOGICAL
logical                   ::= KwLogical Colon Identifier sdMetadata_* lrRule_*;

// Declaration: RESOURCE
resource                  ::= KwResource Colon Identifier sdMetadata_* lrRule_*;

// Metadata
private metadata_         ::= parent | id | title | description | expression | xpath | severity | instanceOf | usage
                              | source | target {methods=[getValueElement getMetadataType]}
parent                    ::= KwParent Colon itemIdentifier;
id                        ::= KwId Colon Identifier {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier]
}
title                     ::= KwTitle Colon string;
description               ::= KwDescription Colon (string | MultilineString);
expression                ::= KwExpression Colon string
xpath                     ::= KwXPath Colon string;
severity                  ::= KwSeverity Colon code;
instanceOf                ::= KwInstanceOf Colon itemIdentifier;
usage                     ::= KwUsage Colon code;
source                    ::= KwSource Colon identifierRef;
target                    ::= KwTarget Colon string;
private sdMetadata_       ::= parent | id | title | description;

// Rules
private sdRule_           ::= cardRule | flagRule | valueSetRule | fixedValueRule | containsRule | onlyRule |
                              obeysRule | caretValueRule | insertRule | pathRule;
private lrRule_           ::= sdRule_ | addElementRule | addCRElementRule;
ruleStart                 ::= WhiteSpace* Star;
cardRule                  ::= ruleStart path cardinality KwFlag*;
flagRule                  ::= ruleStart path KwFlag+ (KwAnd path)*;
valueSetRule              ::= ruleStart path KwFrom itemIdentifier strength?;
fixedValueRule            ::= ruleStart path Equal value (LeftParen KwExactly RightParen)?;
containsRule              ::= ruleStart path KwContains itemType (KwAnd itemType)*;
onlyRule                  ::= ruleStart path KwOnly targetType (KwOr targetType)*;
obeysRule                 ::= ruleStart path? KwObeys identifierRef (KwAnd identifierRef)*;
caretValueRule            ::= ruleStart path? Caret path Equal value;
codeCaretValueRule        ::= ruleStart code* Caret path Equal value;
mappingRule               ::= ruleStart path? Arrow string string? code?;
insertRule                ::= ruleStart path? KwInsert ruleSetReference;
codeInsertRule            ::= ruleStart code* KwInsert ruleSetReference;
addCRElementRule          ::= ruleStart path cardinality KwFlag* KwContentReference Url string (string | MultilineString)?;
addElementRule            ::= ruleStart path cardinality KwFlag* targetType (KwOr targetType)* string (string | MultilineString)?;
pathRule                  ::= ruleStart path;

// Path
path                      ::= Dot | (pathPart (Dot pathPart)*);
pathPart                  ::= (Identifier | KwSystem) bracketSuffix*; // TODO: other keywords may be allowed here
bracketSuffix             ::= LeftBracket (Identifier | Url | integer | Equal | Plus) RightBracket;

// Types
cardinality               ::= integer? DoubleDot (integer | Star)?;
number                    ::= (Plus | "-")? integer (Dot integer)?; // TODO is it properly matched?
integer                   ::= Digit+;
code                      ::= (identifierRef | Url | Urn)? Hash codeValue_ string?;
// Be lenient on code value and accept some reserved keywords
private codeValue_        ::= (identifierRef | string | Digit | allMetadataKws_ | allOtherKws_)
strength                  ::= LeftParen KwBindingStrength RightParen;
ratio                     ::= (number | quantity) Colon (number | quantity);
quantity                  ::= number (Unit | code) string?;
referenceType             ::= KwReference LeftParen itemIdentifier (KwOr itemIdentifier)* RightParen;
itemIdentifier            ::= Identifier | Url {methods=[getReference]}
canonical                 ::= KwCanonical LeftParen itemIdentifier (Pipe itemIdentifier)? (KwOr itemIdentifier (Pipe itemIdentifier)?)* RightParen;
targetType                ::= identifierRef | referenceType | canonical;
value                     ::= string | MultilineString | number | Datetime | Time | referenceType | canonical | code
                              | quantity | ratio | KwBoolean | identifierRef;
itemType                  ::= itemIdentifier (KwNamed identifierRef)? cardinality KwFlag*;
concept                   ::= ruleStart code+ string? (string | MultilineString)?;
ruleSetReference          ::= identifierRef (LeftParen Identifier (Comma Identifier)* RightParen)? {methods=[getParameterCount]}
string                    ::= StringToken {
  implements="com.intellij.psi.PsiLanguageInjectionHost"
  methods=[isValidHost updateText createLiteralTextEscaper]
}
identifierRef             ::= Identifier {methods=[getReference]}


// Collections of keywords
private allItemKws_       ::= KwAlias | KwProfile | KwExtension | KwInstance | KwInvariant | KwValueSet | KwCodeSystem
                              | KwRuleSet | KwMapping | KwLogical | KwResource
private allMetadataKws_   ::= KwParent | KwId | KwTitle | KwDescription | KwExpression | KwXPath | KwSeverity
                              | KwInstanceOf | KwUsage | KwSource | KwTarget
private allOtherKws_      ::= KwFrom | KwContains | KwNamed | KwAnd | KwOr | KwOnly | KwObeys | KwInclude | KwExclude
                              | KwCodes | KwWhere | KwValueSetRef | KwSystem | KwExactly | KwInsert | KwContentReference
                              | KwReference | KwCanonical | KwBoolean | KwFlag | KwBindingStrength | KwCodeOperator

/*
Documentation: https://github.com/JetBrains/Grammar-Kit

Rule modifiers:
1. private (PSI tree): skip node creation and let its child nodes be included in its parent.
2. left (PSI tree): take an AST node on the left (previous sibling) and enclose it by becoming its parent.
3. inner (PSI tree): take an AST node on the left (previous sibling) and inject itself into it by becoming its child.
4. upper (PSI tree): take the parent node and replace it by adopting all its children.
5. meta (parser): a parametrized rule; its parse function can take other parse functions as parameters.
6. external (parser): a rule with a hand-written parse function; no parsing code is generated.
7. fake (PSI classes): a rule for shaping the generated PSI classes; only PSI classes are generated.
 */

// Some fake rules for improving the PSI tree
fake item     ::= alias | profile | extension | invariant | instance | valueSet | codeSystem | ruleSet | mapping
                  | logical | resource {
  mixin="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.impl.FshItemImplCustom"
  implements="ch.qligier.jetbrains.plugin.fhir.fsh.parser.psi.FshItemCustom"
}
fake metadata ::= parent | id | title | description | expression | xpath | severity | instanceOf | usage
                  | source | target {methods=[getValueElement getMetadataType]}
fake rule     ::= cardRule | flagRule | valueSetRule | fixedValueRule | containsRule | onlyRule | obeysRule
                  | caretValueRule | insertRule | pathRule | addElementRule | addCRElementRule | concept
                  | codeCaretValueRule | codeInsertRule | vsComponent | mappingRule

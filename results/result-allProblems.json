{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 978,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 976,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 75: break;\n          case 3: \n            { return FshTypes.STAR;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "4b9efb23e4cfe05465d1fd484a79f2d2f65e1aa445489822491169469cac46dd"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 983,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 981,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 76: break;\n          case 4: \n            { return FshTypes.IDENTIFIER;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "8d83e28957e4fbb4fcb15b4d755eb2afbeb84b6ec4cefa7017734986e5ea7c7b"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 988,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 986,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 77: break;\n          case 5: \n            { return FshTypes.KWFLAG;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "b8ab3514027cea216d0ef146d4ad274b7c6470daf68d9a45441606064783b22f"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 993,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 991,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 78: break;\n          case 6: \n            { return FshTypes.DIGIT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "5e33f85aa6524112642f6a02b4975dfa76bd470e35a434ecf0b01ec0f6575a90"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 998,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 996,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 79: break;\n          case 7: \n            { return FshTypes.COLON;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "efca552f95d97bf2c7651b16aace278cbce5581d75d1d8c994fc5dcdf305dcc9"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1003,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1001,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 80: break;\n          case 8: \n            { return FshTypes.HASH;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "c32dfda1ad458434f73d8ffee43ee5da2dd21c69e21ee1df4ecfff3b9a3f90e0"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1008,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1006,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 81: break;\n          case 9: \n            { return FshTypes.DOT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "462ad36fb39a098ba19286512079c9f54dc094314ec2497f4b214cf78f496828"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1013,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1011,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 82: break;\n          case 10: \n            { return FshTypes.PLUS;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "5fb1ffd19ca2710db6c63ce3141a43a0943260c7268ce15ed70c84b89b4a8ca0"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1018,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1016,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 83: break;\n          case 11: \n            { return FshTypes.EQUAL;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "1663c7028f559ee61dba7904144964d421bd9f0c0522ae4613a22a57f740bff1"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1023,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1021,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 84: break;\n          case 12: \n            { return FshTypes.COMMA;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "f77b15ada6ef6fe386be560b9268ab88b4728e3d460518e66058b55b00411fa7"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1028,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1026,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 85: break;\n          case 13: \n            { return FshTypes.LEFTPAREN;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "2af66b5118faa0badbd2e94f52c045bd63a25178ca77bb0e09963054f9bb2489"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1033,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1031,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 86: break;\n          case 14: \n            { return FshTypes.RIGHTPAREN;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "322584a5921aac7293ac5ae3ad6c9f02b937a6b9e65b6a93c3ca78e1f3c77dbc"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1038,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1036,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 87: break;\n          case 15: \n            { return FshTypes.LEFTBRACKET;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "6e0a05ccbab3a5a31011ea741fea178698add5eb3ea3ba1b7a6117d7cc764830"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1043,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1041,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 88: break;\n          case 16: \n            { return FshTypes.RIGHTBRACKET;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "79e30a988974f4b1b2a75f920ed73f571673d8baadb574ce9416124dd539e387"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1048,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1046,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 89: break;\n          case 17: \n            { return FshTypes.CARET;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "d5ee382d2b4b5c738053096823b79ca24bd81c68dc759be63d03122a428810f3"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1053,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1051,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 90: break;\n          case 18: \n            { return FshTypes.PIPE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "42a9a249e3742752b3a472220ba8fae4537c3ea4a2b44ad8615c3a389e8435d4"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1058,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1056,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 91: break;\n          case 19: \n            { return FshTypes.LINECOMMENT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "397405f1b36704fe54b048ae27b4096359afcb19ce074b00a905d83ab09a34f5"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1063,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1061,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 92: break;\n          case 20: \n            { return FshTypes.KWCODEOPERATOR;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "992e490e2b9245821ac53f5f54cb8bfa6a7ce0952e423a6315610bca6559d364"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1068,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1066,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 93: break;\n          case 21: \n            { return FshTypes.ARROW;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "e1b9e744a33e395a862f5434c8c976182cc37424d8ff877f9aef42824db18c03"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1073,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1071,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 94: break;\n          case 22: \n            { return FshTypes.KWOR;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "ef3b9471a9695f38522cacb620f2b68229176e1f60069f0eecbf080bdec6f869"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1078,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1076,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 95: break;\n          case 23: \n            { return FshTypes.STRINGTOKEN;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "815f8d01edfdd54a17165cec611441f8c42f100b0622d35e9fa5295027b8daf2"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1083,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1081,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 96: break;\n          case 24: \n            { return FshTypes.UNIT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "2312837ecce5d9d9cfc60b6a8dbd30c4979a731a574cdd388508d412dbd8fd9b"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1088,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1086,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 97: break;\n          case 25: \n            { return FshTypes.DOUBLEDOT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "933f12319101d332c97b950b171a055f0cbb3d373c9a4456e64797bcea3888ef"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1093,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1091,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 98: break;\n          case 26: \n            { return FshTypes.KWID;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "ce848ea5fe6c46942f39943831119209692f050ac324a4be01f64c87704342a2"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1098,
      "offset": 20,
      "length": 6,
      "code": {
        "startLine": 1096,
        "length": 6,
        "offset": 62,
        "surroundingCode": "            } \n            // fall through\n          case 99: break;\n          case 27: \n            { return FshTypes.REGEX;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "95e5df2aceb2cecd0bbcb066af19fa4bf601b98029fabb29b26bae613de4afea"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1103,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1101,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 100: break;\n          case 28: \n            { return FshTypes.KWAND;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "37fb81537378233724113e367738339fe84ead7592d2899d083bf1653fb3081a"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1108,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1106,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 101: break;\n          case 29: \n            { return FshTypes.BLOCKCOMMENT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "1b6f94ca4e17eb11ff0d316221d9c613fb8fa14145dd8fa1913f6dec861a86ae"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1113,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1111,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 102: break;\n          case 30: \n            { return FshTypes.KWFROM;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "fbc8acf56a61dd5859d7a908cc1dd7045f4418211a21e0b8ee9f65a9ad0d0a05"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1118,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1116,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 103: break;\n          case 31: \n            { return FshTypes.KWBOOLEAN;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "d8ea67fdb90e5fc6822f4c57ce8293d452405e6d20f3b19fdcec3a7bba5ac8b3"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1123,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1121,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 104: break;\n          case 32: \n            { return FshTypes.KWONLY;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "38d2f6699fa7610eb5b31266b90b60fff3db2956d1c2222744571d14dcf116f7"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1128,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1126,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 105: break;\n          case 33: \n            { return FshTypes.KWUSAGE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "154e45c0f5e9a767b5d99a8e6d316655c691889bd820f3068ed8b14cdcb75b2d"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1133,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1131,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 106: break;\n          case 34: \n            { return FshTypes.KWTITLE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "405472de8bb8e01e6e460f38cb92d71ef0dc6c00fee5b40128edc40448009b0e"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1138,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1136,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 107: break;\n          case 35: \n            { return FshTypes.KWNAMED;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "c734e282915f13565ccd4778aac1a1487c60af9d8809ef7425cfdf46aacb4685"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1143,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1141,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 108: break;\n          case 36: \n            { return FshTypes.URN;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "8df6e69aabc185f46be47a56cd26e13013a284d9c7b5d55b4eb7080d9cb695a8"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1148,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1146,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 109: break;\n          case 37: \n            { return FshTypes.KWCODES;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "303e555762963bf08078a04be408c50c36fea6bded436ad6d720ed0ece5dfc1d"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1153,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1151,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 110: break;\n          case 38: \n            { return FshTypes.KWOBEYS;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "3a459577641bebcc0a85387b5dec62a5c6f1346867f419a1c301b92574870cea"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1158,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1156,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 111: break;\n          case 39: \n            { return FshTypes.TIME;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "0eb4e207b6ab2fe93bc276caefa78518ea92931be1a52d49f0fe699bfe4a4d77"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1163,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1161,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 112: break;\n          case 40: \n            { return FshTypes.KWALIAS;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "b39627c839b21dc1b9636379eff68387e68d3be1cd54290dbeb6e69d5fc315f1"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1168,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1166,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 113: break;\n          case 41: \n            { return FshTypes.KWXPATH;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "163970c67bebecafc8782b44a40518607215273fc2f0f9ccff27c2d17d30f24c"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1173,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1171,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 114: break;\n          case 42: \n            { return FshTypes.KWWHERE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "ae4264df3c18c9ea3bc225120d01ceceb5fcbdce7d86102a8984524f69041b9f"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1178,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1176,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 115: break;\n          case 43: \n            { return FshTypes.KWSOURCE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "aad233c930fec3bd4609c5d273550d8fe8fbceda07b7c577dd203d1467e3de79"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1183,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1181,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 116: break;\n          case 44: \n            { return FshTypes.KWTARGET;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "98a8b1a6512c945bd22e4b6e7a616ae2c9ef679d1664b111b1f10a130d4c60ff"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1188,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1186,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 117: break;\n          case 45: \n            { return FshTypes.KWSYSTEM;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "7389d2098a255f878dcbfb4ff354f7d3968b673d5e9152bf87c4e6255b024175"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1193,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1191,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 118: break;\n          case 46: \n            { return FshTypes.KWINSERT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "14e302f36cdb89b1b27f2c533d7e8c901f27e92e1367f31a93debb101f69cc11"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1198,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1196,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 119: break;\n          case 47: \n            { return FshTypes.MULTILINESTRING;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "1c1a2b35268a3ddbc698ae0834b3620159c6c2ae84abff9175ca805742ace880"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1203,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1201,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 120: break;\n          case 48: \n            { return FshTypes.KWPARENT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "29a825346e9b3148fd7335711e789f402ee551b96748fb3710fbdf9af0b659b4"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1208,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1206,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 121: break;\n          case 49: \n            { return FshTypes.KWMAPPING;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "a74b570367f6577bd86a9277d7d34f91184da160f6093e27da5cf54f0c3653e0"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1213,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1211,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 122: break;\n          case 50: \n            { return FshTypes.KWBINDINGSTRENGTH;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "9d2894cf7c8a7f562ba877a575f8a9633f49fc6b7424a61df86655ff1d7857ef"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1218,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1216,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 123: break;\n          case 51: \n            { return FshTypes.KWEXACTLY;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "15aae1326672f742d7a4d1b5610ce9e067316b67210b6162cc88af364c8be2f9"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1223,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1221,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 124: break;\n          case 52: \n            { return FshTypes.KWEXCLUDE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "5ec982e960494eaac7878de96e86a258cd3249e8bc362ec54af017ec9f90c40c"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1228,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1226,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 125: break;\n          case 53: \n            { return FshTypes.KWINCLUDE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "90c56cb83c76485ccf29c1c7d4309fb4f56f6a9525b4fc0555ea942344b61199"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1233,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1231,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 126: break;\n          case 54: \n            { return FshTypes.KWPROFILE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "4a2e8fad2840a17ef9c7bde97dbb90f642119df2963585b177473f8699b15c67"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1238,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1236,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 127: break;\n          case 55: \n            { return FshTypes.KWRULESET;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "727d7177f161eacbb74cdaa0e20bc8fff7371591126bf9e58fcd672ccdc4256c"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1243,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1241,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 128: break;\n          case 56: \n            { return FshTypes.KWLOGICAL;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "9d9c2b83d996f6eee7e32e9744494f9ebbb137ef621db7cdb4cf51ea8dea8c5d"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1248,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1246,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 129: break;\n          case 57: \n            { return FshTypes.KWSEVERITY;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "7c71869b090b7d70eb786815166dfd61d27492a5a370b5272bf30075a5d5db6f"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1253,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1251,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 130: break;\n          case 58: \n            { return FshTypes.KWCONTAINS;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "695758bcef4ede97d34ee8804d7c402e59b20379f3a1859664788cc720805df1"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1258,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1256,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 131: break;\n          case 59: \n            { return FshTypes.URL;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "1114c3e6148e218bde0f26c940e84a554820a91532404a56d7f26a8e087fb5b2"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1263,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1261,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 132: break;\n          case 60: \n            { return FshTypes.KWINSTANCE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "ba9586d93f54edd169ea200590c08ea5e37ab9bb8f92b6b62c90b23d29e75597"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1268,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1266,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 133: break;\n          case 61: \n            { return FshTypes.KWVALUESETREF;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "f88c2d66858308d1fab41409b5e500138a45e9ffd91e9a77bbb0359717307a66"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1273,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1271,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 134: break;\n          case 62: \n            { return FshTypes.KWVALUESET;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "0b8c4488bb20c9ee7b9735789aae1db104005a7214866e97b14b6b7c79994f33"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1278,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1276,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 135: break;\n          case 63: \n            { return FshTypes.KWRESOURCE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "e091d7badb644dfc4a3a14269b657059cf6c46ed8d17761292a9145413704e43"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1283,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1281,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 136: break;\n          case 64: \n            { return FshTypes.KWEXTENSION;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "1e7b51583eddc64a83a734792128d452c087ac8d1a8ed59843731972f1ac9c9c"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1288,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1286,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 137: break;\n          case 65: \n            { return FshTypes.KWINVARIANT;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "8c58f7a05e803a9808d2224fe4031c6c3a47490c2d30cd29b4277de278089b71"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1293,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1291,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 138: break;\n          case 66: \n            { return FshTypes.KWCANONICAL;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "f28134c5b47d03558b9546ad8b5aedf987b81d2602ac9253eface013d7879c71"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1298,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1296,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 139: break;\n          case 67: \n            { return FshTypes.KWREFERENCE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "1732489f7b189cf763663f7ec0c45ce1c30985d746d77cf80aeb7094d7d5ab70"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1303,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1301,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 140: break;\n          case 68: \n            { return FshTypes.KWEXPRESSION;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "e9c2634a38e80b05315d5e2350485e04612c58b73cbc5db7472cc4223e8f2093"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1308,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1306,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 141: break;\n          case 69: \n            { return FshTypes.KWINSTANCEOF;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "da86b13800971a05fb3d1d7678648bc3230dc5fde31496370a7078fb45c9860d"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1313,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1311,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 142: break;\n          case 70: \n            { return FshTypes.KWCODESYSTEM;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "b51542d56eed76bde1f018c3ea4ef1083d6ef73c48ea2deff1fb98a5314d584a"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1318,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1316,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 143: break;\n          case 71: \n            { return FshTypes.KWDESCRIPTION;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "9df50dfeb9a8462d4173d1e665e44cf563beaa927d5519be7c6ad03a81c3b505"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1323,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1321,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 144: break;\n          case 72: \n            { return FshTypes.KWCONTENTREFERENCE;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "2061c479dee0671e8e3b5a5486b350555685d933562a8f05d09db675bf55a316"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1328,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1326,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 145: break;\n          case 73: \n            { return FshTypes.DATETIME;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "f4a73b27c4afc9b35c86fdab91f3efe32cbbfafc0479b6dd58c00975544aae2d"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Duplicate branches in 'switch'",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Duplicate branch in 'switch'",
  "detailsInfo": "Reports `switch` statements or expressions that contain the same code in different branches and suggests merging the duplicate branches.\n\nExample:\n\n\n      switch (n) {\n        case 1:\n          System.out.println(n);\n          break;\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nAfter the quick-fix is applied:\n\n\n      switch (n) {\n        case 1:\n        case 2:\n          System.out.println(n);\n          break;\n        default:\n          System.out.println(\"default\");\n      }\n\nNew in 2019.1",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 1333,
      "offset": 21,
      "length": 6,
      "code": {
        "startLine": 1331,
        "length": 6,
        "offset": 63,
        "surroundingCode": "            } \n            // fall through\n          case 146: break;\n          default:\n            zzScanError(ZZ_NO_MATCH);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DuplicateBranchesInSwitch"
  },
  "hash": "3f31e789bf9d7f6643837454f0adf19244b02be9fc74cae17811c5fdb4bdc308"
},{
  "tool": "Code Inspection",
  "category": "Javadoc",
  "type": "Mismatch between Javadoc and code",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Method is specified to return list but the return type is array",
  "detailsInfo": "Reports parts of method specification written in English that contradict with the method declaration. This includes:\n\n* Method specified to return `true` or `false` but its return type is not boolean.\n* Method specified to return `null` but it's annotated as `@NotNull` or its return type is primitive.\n* Method specified to return list but its return type is set or array.\n* And so on.\n\n**Example:**\n\n\n      /**\n       * @return true if user is found, false otherwise\n       */\n      User findUser(String name);\n\n\nNote that false-positives are possible, as this inspection tries to interpret a human language. However, if the inspection reports\nincorrectly, it's still possible that the description is confusing and should be rewritten.\n\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/structure/FshStructureViewElement.java",
      "language": "JAVA",
      "line": 66,
      "offset": 20,
      "length": 4,
      "code": {
        "startLine": 64,
        "length": 4,
        "offset": 83,
        "surroundingCode": "     * Returns the list of children of the tree element.\n     *\n     * @return the list of children.\n     */\n    @Override"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "MismatchedJavadocCode"
  },
  "hash": "b4350785d497238719370a6f2ca35bfd5a364d28146ce0eba9ffc0f60a68eae1"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'null' is returned by the method declared as @NotNull",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 49,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 47,
        "length": 4,
        "offset": 89,
        "surroundingCode": "    @Override\n    public @NlsSafe @NotNull String getDefaultExtension() {\n        return null;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "c147e00221e569b50d25b0879db3c24ce3d638a2ff738be3c8e28fe910f290f8"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'null' is returned by the method declared as @NotNull",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 41,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 94,
        "surroundingCode": "    @Override\n    public @NlsContexts.Label @NotNull String getDescription() {\n        return null;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "3582478b18f938355cab2896fbf0e8121972f2e36b234837c2d4a60ae08867bd"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'null' is returned by the method declared as @NotNull",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 33,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 31,
        "length": 4,
        "offset": 76,
        "surroundingCode": "    @Override\n    public @NonNls @NotNull String getName() {\n        return null;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "d53162c8058fec1147760b0c13619c2195a7475559a93311572aedb01267963f"
},{
  "tool": "Code Inspection",
  "category": "Internationalization",
  "type": "Incorrect string capitalization",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "String 'IG Publisher' is not properly capitalized. It should have sentence capitalization",
  "detailsInfo": "Reports strings in method parameters and return values annotated with `@Nls` and having the capitalization parameter to conform to capitalization rules existing in most platform UI guidelines.\n\n**Example:**\n\n\n      void setTitle(@NlsContexts.DialogTitle String title) {}\n      setTitle(\"This is sentence capitalization but should be title\"); \n\nAfter the quick-fix is applied:\n\n\n      setTitle(\"This Is Sentence Capitalization but Should Be Title\"); \n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/configuration/IgPublisherConfigurationType.java",
      "language": "JAVA",
      "line": 46,
      "offset": 16,
      "length": 14,
      "code": {
        "startLine": 44,
        "length": 14,
        "offset": 134,
        "surroundingCode": "    @Override\n    public @Nls(capitalization = Nls.Capitalization.Sentence) String getConfigurationTypeDescription() {\n        return \"IG Publisher\";\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DialogTitleCapitalization"
  },
  "hash": "ed3fb164647faf681742ff0db3f5310d3857957a335c9adbb447de551faaf422"
},{
  "tool": "Code Inspection",
  "category": "Inheritance issues",
  "type": "Abstract class which has no concrete subclass",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Abstract class 'AbstractFshPsiVisitor' has no concrete subclass",
  "detailsInfo": "Reports `abstract` classes that have no concrete subclasses.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/psi/AbstractFshPsiVisitor.java",
      "language": "JAVA",
      "line": 10,
      "offset": 23,
      "length": 21,
      "code": {
        "startLine": 8,
        "length": 21,
        "offset": 53,
        "surroundingCode": " * @author Quentin Ligier\n **/\npublic abstract class AbstractFshPsiVisitor extends FshVisitor {\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "AbstractClassNeverImplemented"
  },
  "hash": "66489cb95ecd3bdc53abf8f8c2893a77cd7f05e2788c0805442ae588789e5857"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Commented out code",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Commented out code (3 lines)",
  "detailsInfo": "Reports comments that contain Java code.\n\nUsually, code that is commented out gets outdated very quickly and becomes misleading.\nAs most projects use some kind of version control system,\nit is better to delete commented out code completely and use the VCS history instead.\n\nNew in 2020.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/FshParserDefinition.java",
      "language": "JAVA",
      "line": 110,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 108,
        "length": 2,
        "offset": 135,
        "surroundingCode": "    @Override\n    public @NotNull SpaceRequirements spaceExistenceTypeBetweenTokens(final ASTNode left, final ASTNode right) {\n        /*if (left.getElementType() == PropertiesTokenTypes.END_OF_LINE_COMMENT) {\n            return SpaceRequirements.MUST_LINE_BREAK;\n        }*/"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CommentedOutCode"
  },
  "hash": "1efbbb061158de68c2ed973762fd57b22a84871df7cb4e132c67f82a57c35950"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Commented out code",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Commented out code (2 lines)",
  "detailsInfo": "Reports comments that contain Java code.\n\nUsually, code that is commented out gets outdated very quickly and becomes misleading.\nAs most projects use some kind of version control system,\nit is better to delete commented out code completely and use the VCS history instead.\n\nNew in 2020.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/highlighter/FshSyntaxHighlighter.java",
      "language": "JAVA",
      "line": 113,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 111,
        "length": 2,
        "offset": 95,
        "surroundingCode": "        } else if (FshTypes.LINECOMMENT.equals(type)) {\n            return pack(LINE_COMMENT);\n/*\n            case FshTypes.COMMENT:\n                return pack(BLOCK_COMMENT);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CommentedOutCode"
  },
  "hash": "1144a49bdffc1048c71b0c29fa0d312a0e04d072f41512c65795943cd83cc15a"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "C-style array declaration",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "C-style array declaration of field 'ZZ_CMAP_Z'",
  "detailsInfo": "Reports array declarations written in C-style syntax in which the array indicator brackets are placed after the variable name or after the method parameter list.\n\nExample:\n\n\n      public String process(String value[])[] {\n        return value;\n      }\n\nMost code styles prefer Java-style array declarations in which the array indicator brackets are attached to the type name, for example:\n\n\n      public String[] process(String[] value) {\n        return value;\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore C-style declarations in variables** option to report C-style array declaration of method return types only.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 48,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 46,
        "length": 9,
        "offset": 65,
        "surroundingCode": "\n  /* The ZZ_CMAP_Z table has 136 entries */\n  static final char ZZ_CMAP_Z[] = zzUnpackCMap(\n    \"\\1\\0\\207\\100\");\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CStyleArrayDeclaration"
  },
  "hash": "36b639259d02bf8bdeffeaf9dac30babd4a3cc0646ab20e554caf1a76cba98f8"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "C-style array declaration",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "C-style array declaration of field 'ZZ_CMAP_A'",
  "detailsInfo": "Reports array declarations written in C-style syntax in which the array indicator brackets are placed after the variable name or after the method parameter list.\n\nExample:\n\n\n      public String process(String value[])[] {\n        return value;\n      }\n\nMost code styles prefer Java-style array declarations in which the array indicator brackets are attached to the type name, for example:\n\n\n      public String[] process(String[] value) {\n        return value;\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore C-style declarations in variables** option to report C-style array declaration of method return types only.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 56,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 54,
        "length": 9,
        "offset": 65,
        "surroundingCode": "\n  /* The ZZ_CMAP_A table has 384 entries */\n  static final char ZZ_CMAP_A[] = zzUnpackCMap(\n    \"\\11\\0\\1\\3\\1\\2\\1\\0\\1\\3\\1\\1\\22\\0\\1\\3\\1\\7\\1\\51\\1\\50\\1\\44\\2\\0\\1\\53\\1\\77\\1\\100\"+\n    \"\\1\\5\\1\\56\\1\\75\\1\\36\\1\\54\\1\\4\\12\\43\\1\\47\\2\\0\\1\\74\\1\\76\\1\\6\\1\\0\\1\\57\\1\\45\\1\"+"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CStyleArrayDeclaration"
  },
  "hash": "4f7d872462cf61cc6eb02812e5d3d9a01244c6226a456204dceac91e1f2e0cbb"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "C-style array declaration",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "C-style array declaration of field 'ZZ_CMAP_Y'",
  "detailsInfo": "Reports array declarations written in C-style syntax in which the array indicator brackets are placed after the variable name or after the method parameter list.\n\nExample:\n\n\n      public String process(String value[])[] {\n        return value;\n      }\n\nMost code styles prefer Java-style array declarations in which the array indicator brackets are attached to the type name, for example:\n\n\n      public String[] process(String[] value) {\n        return value;\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore C-style declarations in variables** option to report C-style array declaration of method return types only.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 52,
      "offset": 21,
      "length": 9,
      "code": {
        "startLine": 50,
        "length": 9,
        "offset": 65,
        "surroundingCode": "\n  /* The ZZ_CMAP_Y table has 128 entries */\n  static final char ZZ_CMAP_Y[] = zzUnpackCMap(\n    \"\\1\\0\\1\\1\\176\\2\");\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CStyleArrayDeclaration"
  },
  "hash": "72e048a63a0c4951815cf664b45d906d597e86a343ef612dd350a2cc5653a809"
},{
  "tool": "Code Inspection",
  "category": "Code style issues",
  "type": "C-style array declaration",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "C-style array declaration of field 'ZZ_LEXSTATE'",
  "detailsInfo": "Reports array declarations written in C-style syntax in which the array indicator brackets are placed after the variable name or after the method parameter list.\n\nExample:\n\n\n      public String process(String value[])[] {\n        return value;\n      }\n\nMost code styles prefer Java-style array declarations in which the array indicator brackets are attached to the type name, for example:\n\n\n      public String[] process(String[] value) {\n        return value;\n      }\n\nConfigure the inspection:\n\n\nUse the **Ignore C-style declarations in variables** option to report C-style array declaration of method return types only.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 34,
      "offset": 28,
      "length": 11,
      "code": {
        "startLine": 32,
        "length": 11,
        "offset": 89,
        "surroundingCode": "   * l is of the form l = 2*k, k a non negative integer\n   */\n  private static final int ZZ_LEXSTATE[] = { \n     0, 0\n  };"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CStyleArrayDeclaration"
  },
  "hash": "42c79b392bdbd80e618b589231b42b1ca7bd5f1f84a6c81d95c66fe0d64dfe15"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unused assignment",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "The value 'zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result)' assigned to 'offset' is never used",
  "detailsInfo": "Reports assignment values that are not used after the assignment. If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations.\n\nThe following cases are reported:\n\n* The variable never gets read after the assignment.\n* The variable is always overwritten with a new value before it is read.\n* The variable initializer is redundant (for one of the two reasons above).\n\nConfigure the inspection:\n\n\nUse the **Report redundant initializers** option to report redundant initializers:\n\n\n      int getI() {\n        int i = 0; // redundant initialization\n        i = 2;\n        return i;\n      }\n\n\nUse the **Report ++i when may be replaced with (i + 1)** option to report the cases when `++i` expression\nmay be replaced with `i + 1`:\n\n\n      int preInc(int i) {\n        int res = i;\n        return ++res;\n      }\n\n\nUse the **Report i++ when changed value is not used afterwards** option to report the cases when the result of `i++` expression\nis not used later:\n\n\n      int postInc(int i) {\n        int res = i;\n        return res++;\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 176,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 174,
        "length": 6,
        "offset": 58,
        "surroundingCode": "    int [] result = new int[421];\n    int offset = 0;\n    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);\n    return result;\n  }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnusedAssignment"
  },
  "hash": "0c8370c81889f5b45ac9b1fea78e413963e3b028135ca49237883873148957b1"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unused assignment",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "The value 'zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result)' assigned to 'offset' is never used",
  "detailsInfo": "Reports assignment values that are not used after the assignment. If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations.\n\nThe following cases are reported:\n\n* The variable never gets read after the assignment.\n* The variable is always overwritten with a new value before it is read.\n* The variable initializer is redundant (for one of the two reasons above).\n\nConfigure the inspection:\n\n\nUse the **Report redundant initializers** option to report redundant initializers:\n\n\n      int getI() {\n        int i = 0; // redundant initialization\n        i = 2;\n        return i;\n      }\n\n\nUse the **Report ++i when may be replaced with (i + 1)** option to report the cases when `++i` expression\nmay be replaced with `i + 1`:\n\n\n      int preInc(int i) {\n        int res = i;\n        return ++res;\n      }\n\n\nUse the **Report i++ when changed value is not used afterwards** option to report the cases when the result of `i++` expression\nis not used later:\n\n\n      int postInc(int i) {\n        int res = i;\n        return res++;\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 656,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 654,
        "length": 6,
        "offset": 58,
        "surroundingCode": "    int [] result = new int[421];\n    int offset = 0;\n    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);\n    return result;\n  }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnusedAssignment"
  },
  "hash": "8bcaf9c35003962632d0de205caf41eb797a79d073ca8b0398cf3fa59f797e58"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unused assignment",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "The value 'zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result)' assigned to 'offset' is never used",
  "detailsInfo": "Reports assignment values that are not used after the assignment. If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations.\n\nThe following cases are reported:\n\n* The variable never gets read after the assignment.\n* The variable is always overwritten with a new value before it is read.\n* The variable initializer is redundant (for one of the two reasons above).\n\nConfigure the inspection:\n\n\nUse the **Report redundant initializers** option to report redundant initializers:\n\n\n      int getI() {\n        int i = 0; // redundant initialization\n        i = 2;\n        return i;\n      }\n\n\nUse the **Report ++i when may be replaced with (i + 1)** option to report the cases when `++i` expression\nmay be replaced with `i + 1`:\n\n\n      int preInc(int i) {\n        int res = i;\n        return ++res;\n      }\n\n\nUse the **Report i++ when changed value is not used afterwards** option to report the cases when the result of `i++` expression\nis not used later:\n\n\n      int postInc(int i) {\n        int res = i;\n        return res++;\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 96,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 94,
        "length": 6,
        "offset": 58,
        "surroundingCode": "    int [] result = new int[421];\n    int offset = 0;\n    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);\n    return result;\n  }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnusedAssignment"
  },
  "hash": "eadb205053d89ea5686bdd07b4e14f2051173faf335744e173b9cc38c6061a75"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Unused assignment",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "The value 'zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result)' assigned to 'offset' is never used",
  "detailsInfo": "Reports assignment values that are not used after the assignment. If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations.\n\nThe following cases are reported:\n\n* The variable never gets read after the assignment.\n* The variable is always overwritten with a new value before it is read.\n* The variable initializer is redundant (for one of the two reasons above).\n\nConfigure the inspection:\n\n\nUse the **Report redundant initializers** option to report redundant initializers:\n\n\n      int getI() {\n        int i = 0; // redundant initialization\n        i = 2;\n        return i;\n      }\n\n\nUse the **Report ++i when may be replaced with (i + 1)** option to report the cases when `++i` expression\nmay be replaced with `i + 1`:\n\n\n      int preInc(int i) {\n        int res = i;\n        return ++res;\n      }\n\n\nUse the **Report i++ when changed value is not used afterwards** option to report the cases when the result of `i++` expression\nis not used later:\n\n\n      int postInc(int i) {\n        int res = i;\n        return res++;\n      }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/gen/ch/qligier/jetbrains/plugin/fhir/fsh/lexer/FshLexer.java",
      "language": "JAVA",
      "line": 607,
      "offset": 5,
      "length": 6,
      "code": {
        "startLine": 605,
        "length": 6,
        "offset": 60,
        "surroundingCode": "    int [] result = new int[24081];\n    int offset = 0;\n    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);\n    return result;\n  }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnusedAssignment"
  },
  "hash": "814b7a611682b490d40dffdc1757beae8fcafacaa59da5044d8ed83a184c3b6d"
},{
  "tool": "Code Inspection",
  "category": "Plugin descriptor",
  "type": "Plugin.xml extension registration",
  "tags": [
    "XML"
  ],
  "severity": "High",
  "comment": "groupName or groupKey should be specified",
  "detailsInfo": "Reports problems with extension registration in `plugin.xml`.\n\n\nThe following problems are reported:\n\n* Missing `language` declaration. If the extension does not target a specific language, use quick fix to create an explicit declaration for \"any language\".\n* Inspections: missing attributes\n* Services: redundant `serviceInterface` declaration\n* `com.intellij.stubElementTypeHolder` without `externalIdPrefix`, see [Stub Indexes](https://plugins.jetbrains.com/docs/intellij/stub-indexes.html?from=?from=DevkitPluginXmlInspectionDescription)\n\n<br />\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/META-INF/plugin.xml",
      "language": "XML",
      "line": 71,
      "offset": 10,
      "length": 15,
      "code": {
        "startLine": 69,
        "length": 15,
        "offset": 147,
        "surroundingCode": "        <annotator language=\"FSH\"\n                   implementationClass=\"ch.qligier.jetbrains.plugin.fhir.fsh.inspection.FshAnnotator\"/>\n        <localInspection language=\"FSH\"\n                         shortName=\"AliasDollarNameInspection\"\n                         displayName=\"Alias names should begin with the $ sign\""
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "PluginXmlExtensionRegistration"
  },
  "hash": "11ecd28cab8ffb876947a3755af5d7d80c8ee97a0763efe8ac88c3503e674424"
},{
  "tool": "Code Inspection",
  "category": "Plugin descriptor",
  "type": "Plugin.xml extension registration",
  "tags": [
    "XML"
  ],
  "severity": "High",
  "comment": "groupName or groupKey should be specified",
  "detailsInfo": "Reports problems with extension registration in `plugin.xml`.\n\n\nThe following problems are reported:\n\n* Missing `language` declaration. If the extension does not target a specific language, use quick fix to create an explicit declaration for \"any language\".\n* Inspections: missing attributes\n* Services: redundant `serviceInterface` declaration\n* `com.intellij.stubElementTypeHolder` without `externalIdPrefix`, see [Stub Indexes](https://plugins.jetbrains.com/docs/intellij/stub-indexes.html?from=?from=DevkitPluginXmlInspectionDescription)\n\n<br />\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/META-INF/plugin.xml",
      "language": "XML",
      "line": 77,
      "offset": 10,
      "length": 15,
      "code": {
        "startLine": 75,
        "length": 15,
        "offset": 173,
        "surroundingCode": "                         level=\"WARNING\"\n                         implementationClass=\"ch.qligier.jetbrains.plugin.fhir.fsh.inspection.AliasDollarNameInspection\"/>\n        <localInspection language=\"FSH\"\n                         shortName=\"IdDerivedFromNameInspection\"\n                         displayName=\"Item ids should be derived from the name\""
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "PluginXmlExtensionRegistration"
  },
  "hash": "ca991efee865e12452433d240b894fe8608af1e9b4c2108425f5e3ade3a37fd6"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 48,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 46,
        "length": 7,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsSafe @NotNull String getDefaultExtension() {\n        return null;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "b440378393cb84ac51a1c9feec9e9350da0ee2fd35efff2247e733a2c80bdc05"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 38,
        "length": 11,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label @NotNull String getDescription() {\n        return null;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "a287e37d0970cae7f197c720c306bd2acff9dd6c0afa397c6019fbd276a95c86"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts.Label' is declared in unstable class 'com.intellij.openapi.util.NlsContexts' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 25,
      "length": 5,
      "code": {
        "startLine": 38,
        "length": 5,
        "offset": 46,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label @NotNull String getDescription() {\n        return null;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "5a96135d521e814d3704ffa3f038748efef197e0e9807aea75da604541e4af5f"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/psi/impl/FshItemImplCustom.java",
      "language": "JAVA",
      "line": 271,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 269,
        "length": 7,
        "offset": 58,
        "surroundingCode": "             */\n            @Override\n            public @NlsSafe @Nullable String getPresentableText() {\n                return item.getName();\n            }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "26e0fc6a5b7e8ae31e8befcb0036c5e9efb134b701d19ee04c71be5eb4cb666f"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/psi/impl/FshItemImplCustom.java",
      "language": "JAVA",
      "line": 282,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 280,
        "length": 7,
        "offset": 58,
        "surroundingCode": "             */\n            @Override\n            public @NlsSafe @Nullable String getLocationString() {\n                final PsiFile file = item.getContainingFile();\n                return file != null ? file.getName() : null;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "4e3e31ae44221d9e92f7b562827a2533efcd95cce809564c520d19ac59aadd49"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Overridden method 'onFileChosen(com.intellij.openapi.vfs.@org.jetbrains.annotations.NotNull VirtualFile)' is declared in unstable class 'com.intellij.openapi.ui.BrowseFolderRunnable' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/configuration/IgPublisherSettingsEditor.java",
      "language": "JAVA",
      "line": 147,
      "offset": 28,
      "length": 12,
      "code": {
        "startLine": 145,
        "length": 12,
        "offset": 143,
        "surroundingCode": "                                                                                    false)) {\n            @Override\n            protected void onFileChosen(@NotNull final VirtualFile chosenFile) {\n                super.onFileChosen(chosenFile);\n                ComponentValidator.getInstance(parentThis.textFieldJarPath).ifPresent(ComponentValidator::revalidate);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "fe87525fd9f36ede8c1eacbb784f74ae9d9b9b0c14411ba092367e489490a6af"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'onFileChosen(com.intellij.openapi.vfs.@org.jetbrains.annotations.NotNull VirtualFile)' is declared in unstable class 'com.intellij.openapi.ui.BrowseFolderRunnable' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/configuration/IgPublisherSettingsEditor.java",
      "language": "JAVA",
      "line": 148,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 146,
        "length": 12,
        "offset": 125,
        "surroundingCode": "            @Override\n            protected void onFileChosen(@NotNull final VirtualFile chosenFile) {\n                super.onFileChosen(chosenFile);\n                ComponentValidator.getInstance(parentThis.textFieldJarPath).ifPresent(ComponentValidator::revalidate);\n                updateIgPublisherStatus();"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "ef1697eceaf6c5c772bf718ab69dfc46a6a28ca7e43d038e31a233faa9fd9537"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/FshFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 38,
        "length": 11,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label\n    @NotNull String getDescription() {\n        return \"FSH (SUSHI) file\";"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "70edf763b01e69a12d2c8707410ef3908f3fc96eb1398a049f8c398d338fc8a5"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts.Label' is declared in unstable class 'com.intellij.openapi.util.NlsContexts' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/FshFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 25,
      "length": 5,
      "code": {
        "startLine": 38,
        "length": 5,
        "offset": 46,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label\n    @NotNull String getDescription() {\n        return \"FSH (SUSHI) file\";"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "0df6a1e236a0e57d31a9751b7134705d6cc619376d087e2bb6a47afba021e0fa"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/FshFileType.java",
      "language": "JAVA",
      "line": 49,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 47,
        "length": 7,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsSafe\n    @NotNull String getDefaultExtension() {\n        return \"fsh\";"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "395b8773663fa0c55eb1066bc5f8121d9edd684c4528c305464f0352c83cd285"
}]}
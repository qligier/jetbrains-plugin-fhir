{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Javadoc",
  "type": "Mismatch between Javadoc and code",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Method is specified to return list but the return type is array",
  "detailsInfo": "Reports parts of method specification written in English that contradict with the method declaration. This includes:\n\n* Method specified to return `true` or `false` but its return type is not boolean.\n* Method specified to return `null` but it's annotated as `@NotNull` or its return type is primitive.\n* Method specified to return list but its return type is set or array.\n* And so on.\n\n**Example:**\n\n\n      /**\n       * @return true if user is found, false otherwise\n       */\n      User findUser(String name);\n\n\nNote that false-positives are possible, as this inspection tries to interpret a human language. However, if the inspection reports\nincorrectly, it's still possible that the description is confusing and should be rewritten.\n\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/structure/FshStructureViewElement.java",
      "language": "JAVA",
      "line": 66,
      "offset": 20,
      "length": 4,
      "code": {
        "startLine": 64,
        "length": 4,
        "offset": 83,
        "surroundingCode": "     * Returns the list of children of the tree element.\n     *\n     * @return the list of children.\n     */\n    @Override"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "MismatchedJavadocCode"
  },
  "hash": "b4350785d497238719370a6f2ca35bfd5a364d28146ce0eba9ffc0f60a68eae1"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'null' is returned by the method declared as @NotNull",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 33,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 31,
        "length": 4,
        "offset": 76,
        "surroundingCode": "    @Override\n    public @NonNls @NotNull String getName() {\n        return null;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "d53162c8058fec1147760b0c13619c2195a7475559a93311572aedb01267963f"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'null' is returned by the method declared as @NotNull",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 49,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 47,
        "length": 4,
        "offset": 89,
        "surroundingCode": "    @Override\n    public @NlsSafe @NotNull String getDefaultExtension() {\n        return null;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "c147e00221e569b50d25b0879db3c24ce3d638a2ff738be3c8e28fe910f290f8"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'null' is returned by the method declared as @NotNull",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 41,
      "offset": 16,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 94,
        "surroundingCode": "    @Override\n    public @NlsContexts.Label @NotNull String getDescription() {\n        return null;\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "3582478b18f938355cab2896fbf0e8121972f2e36b234837c2d4a60ae08867bd"
},{
  "tool": "Code Inspection",
  "category": "Internationalization",
  "type": "Incorrect string capitalization",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "String 'IG Publisher' is not properly capitalized. It should have sentence capitalization",
  "detailsInfo": "Reports strings in method parameters and return values annotated with `@Nls` and having the capitalization parameter to conform to capitalization rules existing in most platform UI guidelines.\n\n**Example:**\n\n\n      void setTitle(@NlsContexts.DialogTitle String title) {}\n      setTitle(\"This is sentence capitalization but should be title\"); \n\nAfter the quick-fix is applied:\n\n\n      setTitle(\"This Is Sentence Capitalization but Should Be Title\"); \n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/configuration/IgPublisherConfigurationType.java",
      "language": "JAVA",
      "line": 46,
      "offset": 16,
      "length": 14,
      "code": {
        "startLine": 44,
        "length": 14,
        "offset": 134,
        "surroundingCode": "    @Override\n    public @Nls(capitalization = Nls.Capitalization.Sentence) String getConfigurationTypeDescription() {\n        return \"IG Publisher\";\n    }\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DialogTitleCapitalization"
  },
  "hash": "ed3fb164647faf681742ff0db3f5310d3857957a335c9adbb447de551faaf422"
},{
  "tool": "Code Inspection",
  "category": "Inheritance issues",
  "type": "Abstract class which has no concrete subclass",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Abstract class 'AbstractFshPsiVisitor' has no concrete subclass",
  "detailsInfo": "Reports `abstract` classes that have no concrete subclasses.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/psi/AbstractFshPsiVisitor.java",
      "language": "JAVA",
      "line": 10,
      "offset": 23,
      "length": 21,
      "code": {
        "startLine": 8,
        "length": 21,
        "offset": 53,
        "surroundingCode": " * @author Quentin Ligier\n **/\npublic abstract class AbstractFshPsiVisitor extends FshVisitor {\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "AbstractClassNeverImplemented"
  },
  "hash": "66489cb95ecd3bdc53abf8f8c2893a77cd7f05e2788c0805442ae588789e5857"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Commented out code",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Commented out code (3 lines)",
  "detailsInfo": "Reports comments that contain Java code.\n\nUsually, code that is commented out gets outdated very quickly and becomes misleading.\nAs most projects use some kind of version control system,\nit is better to delete commented out code completely and use the VCS history instead.\n\nNew in 2020.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/FshParserDefinition.java",
      "language": "JAVA",
      "line": 110,
      "offset": 9,
      "length": 2,
      "code": {
        "startLine": 108,
        "length": 2,
        "offset": 135,
        "surroundingCode": "    @Override\n    public @NotNull SpaceRequirements spaceExistenceTypeBetweenTokens(final ASTNode left, final ASTNode right) {\n        /*if (left.getElementType() == PropertiesTokenTypes.END_OF_LINE_COMMENT) {\n            return SpaceRequirements.MUST_LINE_BREAK;\n        }*/"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CommentedOutCode"
  },
  "hash": "1efbbb061158de68c2ed973762fd57b22a84871df7cb4e132c67f82a57c35950"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Commented out code",
  "tags": [
    "JAVA"
  ],
  "severity": "Moderate",
  "comment": "Commented out code (2 lines)",
  "detailsInfo": "Reports comments that contain Java code.\n\nUsually, code that is commented out gets outdated very quickly and becomes misleading.\nAs most projects use some kind of version control system,\nit is better to delete commented out code completely and use the VCS history instead.\n\nNew in 2020.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/highlighter/FshSyntaxHighlighter.java",
      "language": "JAVA",
      "line": 113,
      "offset": 1,
      "length": 2,
      "code": {
        "startLine": 111,
        "length": 2,
        "offset": 95,
        "surroundingCode": "        } else if (FshTypes.LINECOMMENT.equals(type)) {\n            return pack(LINE_COMMENT);\n/*\n            case FshTypes.COMMENT:\n                return pack(BLOCK_COMMENT);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "CommentedOutCode"
  },
  "hash": "1144a49bdffc1048c71b0c29fa0d312a0e04d072f41512c65795943cd83cc15a"
},{
  "tool": "Code Inspection",
  "category": "Plugin descriptor",
  "type": "Plugin.xml extension registration",
  "tags": [
    "XML"
  ],
  "severity": "High",
  "comment": "groupName or groupKey should be specified",
  "detailsInfo": "Reports problems with extension registration in `plugin.xml`.\n\n\nThe following problems are reported:\n\n* Missing `language` declaration. If the extension does not target a specific language, use quick fix to create an explicit declaration for \"any language\".\n* Inspections: missing attributes\n* Services: redundant `serviceInterface` declaration\n* `com.intellij.stubElementTypeHolder` without `externalIdPrefix`, see [Stub Indexes](https://plugins.jetbrains.com/docs/intellij/stub-indexes.html?from=?from=DevkitPluginXmlInspectionDescription)\n\n<br />\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/META-INF/plugin.xml",
      "language": "XML",
      "line": 71,
      "offset": 10,
      "length": 15,
      "code": {
        "startLine": 69,
        "length": 15,
        "offset": 147,
        "surroundingCode": "        <annotator language=\"FSH\"\n                   implementationClass=\"ch.qligier.jetbrains.plugin.fhir.fsh.inspection.FshAnnotator\"/>\n        <localInspection language=\"FSH\"\n                         shortName=\"AliasDollarNameInspection\"\n                         displayName=\"Alias names should begin with the $ sign\""
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "PluginXmlExtensionRegistration"
  },
  "hash": "11ecd28cab8ffb876947a3755af5d7d80c8ee97a0763efe8ac88c3503e674424"
},{
  "tool": "Code Inspection",
  "category": "Plugin descriptor",
  "type": "Plugin.xml extension registration",
  "tags": [
    "XML"
  ],
  "severity": "High",
  "comment": "groupName or groupKey should be specified",
  "detailsInfo": "Reports problems with extension registration in `plugin.xml`.\n\n\nThe following problems are reported:\n\n* Missing `language` declaration. If the extension does not target a specific language, use quick fix to create an explicit declaration for \"any language\".\n* Inspections: missing attributes\n* Services: redundant `serviceInterface` declaration\n* `com.intellij.stubElementTypeHolder` without `externalIdPrefix`, see [Stub Indexes](https://plugins.jetbrains.com/docs/intellij/stub-indexes.html?from=?from=DevkitPluginXmlInspectionDescription)\n\n<br />\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/META-INF/plugin.xml",
      "language": "XML",
      "line": 77,
      "offset": 10,
      "length": 15,
      "code": {
        "startLine": 75,
        "length": 15,
        "offset": 173,
        "surroundingCode": "                         level=\"WARNING\"\n                         implementationClass=\"ch.qligier.jetbrains.plugin.fhir.fsh.inspection.AliasDollarNameInspection\"/>\n        <localInspection language=\"FSH\"\n                         shortName=\"IdDerivedFromNameInspection\"\n                         displayName=\"Item ids should be derived from the name\""
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "PluginXmlExtensionRegistration"
  },
  "hash": "ca991efee865e12452433d240b894fe8608af1e9b4c2108425f5e3ade3a37fd6"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 48,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 46,
        "length": 7,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsSafe @NotNull String getDefaultExtension() {\n        return null;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "b440378393cb84ac51a1c9feec9e9350da0ee2fd35efff2247e733a2c80bdc05"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 38,
        "length": 11,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label @NotNull String getDescription() {\n        return null;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "a287e37d0970cae7f197c720c306bd2acff9dd6c0afa397c6019fbd276a95c86"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts.Label' is declared in unstable class 'com.intellij.openapi.util.NlsContexts' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igini/IgIniFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 25,
      "length": 5,
      "code": {
        "startLine": 38,
        "length": 5,
        "offset": 46,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label @NotNull String getDescription() {\n        return null;\n    }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "5a96135d521e814d3704ffa3f038748efef197e0e9807aea75da604541e4af5f"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/psi/impl/FshItemImplCustom.java",
      "language": "JAVA",
      "line": 271,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 269,
        "length": 7,
        "offset": 58,
        "surroundingCode": "             */\n            @Override\n            public @NlsSafe @Nullable String getPresentableText() {\n                return item.getName();\n            }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "26e0fc6a5b7e8ae31e8befcb0036c5e9efb134b701d19ee04c71be5eb4cb666f"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/parser/psi/impl/FshItemImplCustom.java",
      "language": "JAVA",
      "line": 282,
      "offset": 21,
      "length": 7,
      "code": {
        "startLine": 280,
        "length": 7,
        "offset": 58,
        "surroundingCode": "             */\n            @Override\n            public @NlsSafe @Nullable String getLocationString() {\n                final PsiFile file = item.getContainingFile();\n                return file != null ? file.getName() : null;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "4e3e31ae44221d9e92f7b562827a2533efcd95cce809564c520d19ac59aadd49"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Overridden method 'onFileChosen(com.intellij.openapi.vfs.@org.jetbrains.annotations.NotNull VirtualFile)' is declared in unstable class 'com.intellij.openapi.ui.BrowseFolderRunnable' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/configuration/IgPublisherSettingsEditor.java",
      "language": "JAVA",
      "line": 147,
      "offset": 28,
      "length": 12,
      "code": {
        "startLine": 145,
        "length": 12,
        "offset": 143,
        "surroundingCode": "                                                                                    false)) {\n            @Override\n            protected void onFileChosen(@NotNull final VirtualFile chosenFile) {\n                super.onFileChosen(chosenFile);\n                ComponentValidator.getInstance(parentThis.textFieldJarPath).ifPresent(ComponentValidator::revalidate);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "fe87525fd9f36ede8c1eacbb784f74ae9d9b9b0c14411ba092367e489490a6af"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'onFileChosen(com.intellij.openapi.vfs.@org.jetbrains.annotations.NotNull VirtualFile)' is declared in unstable class 'com.intellij.openapi.ui.BrowseFolderRunnable' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/configuration/IgPublisherSettingsEditor.java",
      "language": "JAVA",
      "line": 148,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 146,
        "length": 12,
        "offset": 125,
        "surroundingCode": "            @Override\n            protected void onFileChosen(@NotNull final VirtualFile chosenFile) {\n                super.onFileChosen(chosenFile);\n                ComponentValidator.getInstance(parentThis.textFieldJarPath).ifPresent(ComponentValidator::revalidate);\n                updateIgPublisherStatus();"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "ef1697eceaf6c5c772bf718ab69dfc46a6a28ca7e43d038e31a233faa9fd9537"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsSafe' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/FshFileType.java",
      "language": "JAVA",
      "line": 49,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 47,
        "length": 7,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsSafe\n    @NotNull String getDefaultExtension() {\n        return \"fsh\";"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "395b8773663fa0c55eb1066bc5f8121d9edd684c4528c305464f0352c83cd285"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/FshFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 38,
        "length": 11,
        "offset": 34,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label\n    @NotNull String getDescription() {\n        return \"FSH (SUSHI) file\";"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "70edf763b01e69a12d2c8707410ef3908f3fc96eb1398a049f8c398d338fc8a5"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.openapi.util.NlsContexts.Label' is declared in unstable class 'com.intellij.openapi.util.NlsContexts' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/fsh/FshFileType.java",
      "language": "JAVA",
      "line": 40,
      "offset": 25,
      "length": 5,
      "code": {
        "startLine": 38,
        "length": 5,
        "offset": 46,
        "surroundingCode": "     */\n    @Override\n    public @NlsContexts.Label\n    @NotNull String getDescription() {\n        return \"FSH (SUSHI) file\";"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "0df6a1e236a0e57d31a9751b7134705d6cc619376d087e2bb6a47afba021e0fa"
}]}
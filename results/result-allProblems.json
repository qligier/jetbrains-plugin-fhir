{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of 'System.out' should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarManager.java",
      "language": "JAVA",
      "line": 83,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 81,
        "length": 10,
        "offset": 61,
        "surroundingCode": "        }\n        for (final var file : files) {\n            System.out.println(\"Found \" + file.getName());\n            return file;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "d82b7a42b64c1e4824a461f0d30c72d02f94b0b2a2534a103d8fe8422dabcc00"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of 'System.out' should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarDownloader.java",
      "language": "JAVA",
      "line": 69,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 67,
        "length": 10,
        "offset": 183,
        "surroundingCode": "                                             @Nullable final Runnable onSuccess,\n                                             @Nullable final Consumer<Throwable> onFailure) {\n        System.out.println(\"downloadLatestRelease\");\n        final List<String> versions;\n        try {"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "7c732d45b31ebd7df15083545471b6d613471464d8caf4027706eeba9d99f498"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of 'System.out' should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarDownloader.java",
      "language": "JAVA",
      "line": 89,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 87,
        "length": 10,
        "offset": 187,
        "surroundingCode": "                                               @Nullable final Runnable onSuccess,\n                                               @Nullable final Consumer<Throwable> onFailure) {\n        System.out.println(\"downloadSpecificRelease: \" + version);\n        final String jarUrl = String.format(SPECIFIC_JAR_URL, version);\n        final String jarFileName = String.format(\"publisher-%s.jar\", version);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "76ce5d7efc00eaaa4ea087967a1b0a8ad6b9ddecb1d0584c3d7883c5de371e5f"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of 'System.out' should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarDownloader.java",
      "language": "JAVA",
      "line": 93,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 91,
        "length": 10,
        "offset": 149,
        "surroundingCode": "        final String jarFileName = String.format(\"publisher-%s.jar\", version);\n        final String jarPartFileName = jarFileName + \".part\";\n        System.out.println(jarUrl);\n        System.out.println(jarFileName);\n        System.out.println(jarPartFileName);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "1f17bc5217d8c37aad1b0328b0048b135b6f54f672a1b95f95cf266dd20e8d89"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of 'System.out' should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarDownloader.java",
      "language": "JAVA",
      "line": 94,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 92,
        "length": 10,
        "offset": 106,
        "surroundingCode": "        final String jarPartFileName = jarFileName + \".part\";\n        System.out.println(jarUrl);\n        System.out.println(jarFileName);\n        System.out.println(jarPartFileName);\n        System.out.println(IgPublisherJarManager.LOCAL_JAR_DIRECTORY);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "498a23ad922e37cc0b233040e09197121d717fd39a37786fa7ae1597332d42fe"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of 'System.out' should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarDownloader.java",
      "language": "JAVA",
      "line": 95,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 93,
        "length": 10,
        "offset": 85,
        "surroundingCode": "        System.out.println(jarUrl);\n        System.out.println(jarFileName);\n        System.out.println(jarPartFileName);\n        System.out.println(IgPublisherJarManager.LOCAL_JAR_DIRECTORY);\n"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "52017a756bccb3edd39f520159f5b0074bbd53ab25d8830d92a123226c979979"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of 'System.out' should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarDownloader.java",
      "language": "JAVA",
      "line": 96,
      "offset": 9,
      "length": 10,
      "code": {
        "startLine": 94,
        "length": 10,
        "offset": 94,
        "surroundingCode": "        System.out.println(jarFileName);\n        System.out.println(jarPartFileName);\n        System.out.println(IgPublisherJarManager.LOCAL_JAR_DIRECTORY);\n\n        final File directory = new File(IgPublisherJarManager.LOCAL_JAR_DIRECTORY);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "94b385d6bbd633961f256f2968ecdfdade20fc9d868225766c97948688878c45"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Redundant array length check",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Redundant array length check",
  "detailsInfo": "Reports unnecessary array length checks followed by array iteration. When array length is zero, the iteration will be skipped anyway, so there's no need to check length explicitly.\n\nExample:\n\n\n      void f(String[] array) {\n        if (array.length != 0) { // unnecessary check\n          for (String str : array) {\n            System.out.println(str);\n          }\n        }\n      }\n\nA quick-fix is suggested to unwrap or remove the length check:\n\n\n      void f(String[] array) {\n        for (String str : array) {\n          System.out.println(str);\n        }\n      }\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarManager.java",
      "language": "JAVA",
      "line": 79,
      "offset": 30,
      "length": 17,
      "code": {
        "startLine": 77,
        "length": 17,
        "offset": 103,
        "surroundingCode": "        };\n        final var files = directory.listFiles(filenameFilter);\n        if (files == null || files.length == 0) {\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "RedundantLengthCheck"
  },
  "hash": "ceb1695218eafdd43515a835a4bbb6b45390161a8549fde9fc92af25639e201d"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Redundant array length check",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Redundant array length check",
  "detailsInfo": "Reports unnecessary array length checks followed by array iteration. When array length is zero, the iteration will be skipped anyway, so there's no need to check length explicitly.\n\nExample:\n\n\n      void f(String[] array) {\n        if (array.length != 0) { // unnecessary check\n          for (String str : array) {\n            System.out.println(str);\n          }\n        }\n      }\n\nA quick-fix is suggested to unwrap or remove the length check:\n\n\n      void f(String[] array) {\n        for (String str : array) {\n          System.out.println(str);\n        }\n      }\n\nNew in 2022.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarManager.java",
      "language": "JAVA",
      "line": 50,
      "offset": 30,
      "length": 17,
      "code": {
        "startLine": 48,
        "length": 17,
        "offset": 103,
        "surroundingCode": "        };\n        final var files = directory.listFiles(filenameFilter);\n        if (files == null || files.length == 0) {\n            return;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "RedundantLengthCheck"
  },
  "hash": "53335e9b625d369e6589c3027795c9a73c3b908f7e70609a010218eb7756f7c2"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Usage of API marked for removal",
  "tags": [
    "JAVA"
  ],
  "severity": "Critical",
  "comment": "'com.intellij.openapi.actionSystem.UpdateInBackground' is deprecated and marked for removal",
  "detailsInfo": "Reports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with `@Deprecated(`**forRemoval**`=true)`.\n\n\nThe code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why\nthe recommended severity for this inspection is *Error*.\n\n\nYou can change the severity to *Warning* if you want to use the same code highlighting as in ordinary deprecation.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/DownloadLatestIgPublisherJarAction.java",
      "language": "JAVA",
      "line": 11,
      "offset": 42,
      "length": 18,
      "code": {
        "startLine": 9,
        "length": 18,
        "offset": 148,
        "surroundingCode": "import com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.UpdateInBackground;\nimport com.intellij.openapi.project.DumbAware;\nimport org.jetbrains.annotations.NotNull;"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "MarkedForRemoval"
  },
  "hash": "3ea67ac9b1160f7389415c6fa449d79da061e9ce548115530ce0dd21a3d7ee74"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Usage of API marked for removal",
  "tags": [
    "JAVA"
  ],
  "severity": "Critical",
  "comment": "'com.intellij.openapi.actionSystem.UpdateInBackground' is deprecated and marked for removal",
  "detailsInfo": "Reports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with `@Deprecated(`**forRemoval**`=true)`.\n\n\nThe code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why\nthe recommended severity for this inspection is *Error*.\n\n\nYou can change the severity to *Warning* if you want to use the same code highlighting as in ordinary deprecation.\n\nNew in 2017.3",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/DownloadLatestIgPublisherJarAction.java",
      "language": "JAVA",
      "line": 21,
      "offset": 88,
      "length": 18,
      "code": {
        "startLine": 19,
        "length": 18,
        "offset": 191,
        "surroundingCode": " * @see <a href=\"https://plugins.jetbrains.com/docs/intellij/basic-action-system.html\">Actions</a>\n **/\npublic class DownloadLatestIgPublisherJarAction extends AnAction implements DumbAware, UpdateInBackground {\n\n    /**"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "MarkedForRemoval"
  },
  "hash": "7c6fae43b665898cc68f531cb8a61feee09bc911d5ff4e87da4a333812a5278f"
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Nullability and data flow problems",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Argument 'onSuccess' might be null",
  "detailsInfo": "Reports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\nExamples:\n\n    if (array.length < index) {\n      System.out.println(array[index]);\n    } // Array index is always out of bounds\n\n    if (str == null) System.out.println(\"str is null\");\n    System.out.println(str.trim());\n    // the last statement may throw an NPE\n\n    @NotNull\n    Integer square(@Nullable Integer input) {\n        // the method contract is violated\n        return input == null ? null : input * input;\n    }\n\n\nThe inspection behavior may be controlled by a number of annotations, such as\n[nullability](https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html) annotations,\n[@Contract](https://www.jetbrains.com/help/idea/contract-annotations.html) annotation,\n`@Range` annotation and so on.\n\nConfigure the inspection:\n\n* Use the **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used** option to warn when a nullable value is passed as an argument to a method with a non-annotated parameter, stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating the `@Nullable` annotation. You can also configure nullability annotations using the **Configure Annotations** button.\n* Use the **Treat non-annotated members and parameters as @Nullable** option to assume that non-annotated members can be null, so they must not be used in non-null context.\n* Use the **Report not-null required parameter with null-literal argument usages** option to report method parameters that cannot be null (e.g. immediately dereferenced in the method body), but there are call sites where a `null` literal is passed.\n* Use the **Report nullable methods that always return a non-null value** option to report methods that are annotated as `@Nullable`, but always return non-null value. In this case, it's suggested that you change the annotation to `@NotNull`.\n* Use the **Ignore assert statements** option to control how the inspection treats `assert` statements. By default, the option is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored (-da mode).\n* Use the **Report problems that happen only on some code paths** option to control whether to report problems that may happen only on some code path. If this option is disabled, warnings like *exception is possible* will not be reported. The inspection will report only warnings like *exception will definitely occur*. This mode may greatly reduce the number of false-positives, especially if the code is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most important problems in legacy code bases.\n\n\nBefore IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \\& Exceptions\" inspection.\nNow, it is split into two inspections:\n\"Constant Values\" and \"Nullability and data flow problems\".",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/jar/IgPublisherJarDownloader.java",
      "language": "JAVA",
      "line": 126,
      "offset": 69,
      "length": 9,
      "code": {
        "startLine": 124,
        "length": 9,
        "offset": 220,
        "surroundingCode": "                        throw new IOException(\"Unable to rename file '\" + file.getAbsolutePath() + \"' to '\" + jarFileName + \"'\");\n                    }\n                    ApplicationManager.getApplication().invokeLater(onSuccess);\n                } catch (IOException e) {\n                    LOG.warn(\"Can't download content '\" + jarUrl + \"' as '\" + jarFileName + \"'\", e);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "DataFlowIssue"
  },
  "hash": "c7dbb4e9fd787d7d6271ef9cc7c93526fef7b4adedabb0aba5a5085da3e699d4"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Overridden method 'onFileChosen(com.intellij.openapi.vfs.@org.jetbrains.annotations.NotNull VirtualFile)' is declared in unstable class 'com.intellij.openapi.ui.BrowseFolderRunnable' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/configuration/IgPublisherSettingsEditor.java",
      "language": "JAVA",
      "line": 147,
      "offset": 28,
      "length": 12,
      "code": {
        "startLine": 145,
        "length": 12,
        "offset": 143,
        "surroundingCode": "                                                                                    false)) {\n            @Override\n            protected void onFileChosen(@NotNull final VirtualFile chosenFile) {\n                super.onFileChosen(chosenFile);\n                ComponentValidator.getInstance(parentThis.textFieldJarPath).ifPresent(ComponentValidator::revalidate);"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "882b1fab3c25be907c084ae1018697a5db0e4620cd9b33e4f658e8cb559dc662"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'onFileChosen(com.intellij.openapi.vfs.@org.jetbrains.annotations.NotNull VirtualFile)' is declared in unstable class 'com.intellij.openapi.ui.BrowseFolderRunnable' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/igpublisher/configuration/IgPublisherSettingsEditor.java",
      "language": "JAVA",
      "line": 148,
      "offset": 23,
      "length": 12,
      "code": {
        "startLine": 146,
        "length": 12,
        "offset": 125,
        "surroundingCode": "            @Override\n            protected void onFileChosen(@NotNull final VirtualFile chosenFile) {\n                super.onFileChosen(chosenFile);\n                ComponentValidator.getInstance(parentThis.textFieldJarPath).ifPresent(ComponentValidator::revalidate);\n                updateIgPublisherStatus();"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "893fae138197560eff695fa01d7e4884c50a08c1f3d6c8c99fc988c42d83e190"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'com.intellij.ide.impl.TrustedProjects' is marked unstable with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/common/ThePlugin.java",
      "language": "JAVA",
      "line": 40,
      "offset": 33,
      "length": 15,
      "code": {
        "startLine": 38,
        "length": 15,
        "offset": 125,
        "surroundingCode": "     */\n    public static boolean shouldActivateInProject(@Nullable final Project project) {\n        if (project == null || !TrustedProjects.isTrusted(project)) {\n            return false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "76de63b8304f7c670f85f621c28a6231b59b54c0bf35fd9c97335e6f45f3f868"
},{
  "tool": "Code Inspection",
  "category": "JVM languages",
  "type": "Unstable API Usage",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "'isTrusted(com.intellij.openapi.project.Project)' is declared in unstable 'com.intellij.ide.impl.TrustedProjects' marked with @ApiStatus.Experimental",
  "detailsInfo": "Reports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking the code that uses it.\n\nThe annotations which are used to mark unstable APIs are shown in the list below.\n\nBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the **Ignore API declared in this project** option to report\nthe usages of unstable APIs declared in both the project sources and libraries.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/ch/qligier/jetbrains/plugin/fhir/common/ThePlugin.java",
      "language": "JAVA",
      "line": 40,
      "offset": 49,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 141,
        "surroundingCode": "     */\n    public static boolean shouldActivateInProject(@Nullable final Project project) {\n        if (project == null || !TrustedProjects.isTrusted(project)) {\n            return false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "jetbrains-plugin-fhir.main",
    "inspectionName": "UnstableApiUsage"
  },
  "hash": "3a29a7c160b3fa8ed6e0f37218b24720e46e19bc882623199c94a23a6e19c5b2"
}]}